// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "spreadsheet.h"

// Dispatch interfaces referenced by this interface
#include "Picture.h"
#include "Font.h"

/////////////////////////////////////////////////////////////////////////////
// CSpreadSheet

IMPLEMENT_DYNCREATE(CSpreadSheet, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CSpreadSheet properties

long CSpreadSheet::GetAction()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetAction(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CSpreadSheet::GetActiveCol()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetActiveCol(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CSpreadSheet::GetActiveRow()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetActiveRow(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

BOOL CSpreadSheet::GetAllowCellOverflow()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetAllowCellOverflow(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetAllowDragDrop()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetAllowDragDrop(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetAllowMultiBlocks()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetAllowMultiBlocks(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetAllowUserFormulas()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetAllowUserFormulas(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetArrowsExitEditMode()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetArrowsExitEditMode(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetAutoCalc()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetAutoCalc(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetAutoClipboard()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetAutoClipboard(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetAutoSize()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetAutoSize(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetBlockMode()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetBlockMode(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

short CSpreadSheet::GetButtonDrawMode()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetButtonDrawMode(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

unsigned long CSpreadSheet::GetCellBorderColor()
{
	unsigned long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetCellBorderColor(unsigned long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

long CSpreadSheet::GetCellBorderStyle()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetCellBorderStyle(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

short CSpreadSheet::GetCellBorderType()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetCellBorderType(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

long CSpreadSheet::GetCellType()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetCellType(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

BOOL CSpreadSheet::GetChangeMade()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetChangeMade(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

CString CSpreadSheet::GetClip()
{
	CString result;
	GetProperty(0x14, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetClip(LPCTSTR propVal)
{
	SetProperty(0x14, VT_BSTR, propVal);
}

CString CSpreadSheet::GetClipValue()
{
	CString result;
	GetProperty(0x15, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetClipValue(LPCTSTR propVal)
{
	SetProperty(0x15, VT_BSTR, propVal);
}

long CSpreadSheet::GetCol()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetCol(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

long CSpreadSheet::GetCol2()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetCol2(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

long CSpreadSheet::GetColHeaderDisplay()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetColHeaderDisplay(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

BOOL CSpreadSheet::GetColHidden()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetColHidden(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetColPageBreak()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetColPageBreak(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

long CSpreadSheet::GetColsFrozen()
{
	long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetColsFrozen(long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

long CSpreadSheet::GetCursorStyle()
{
	long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetCursorStyle(long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

long CSpreadSheet::GetCursorType()
{
	long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetCursorType(long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

BOOL CSpreadSheet::GetDataChanged()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetDataChanged(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

long CSpreadSheet::GetDataColCnt()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetDataColCnt(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

CString CSpreadSheet::GetDataField()
{
	CString result;
	GetProperty(0x20, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetDataField(LPCTSTR propVal)
{
	SetProperty(0x20, VT_BSTR, propVal);
}

BOOL CSpreadSheet::GetDataFillEvent()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetDataFillEvent(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

long CSpreadSheet::GetDataRowCnt()
{
	long result;
	GetProperty(0x22, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetDataRowCnt(long propVal)
{
	SetProperty(0x22, VT_I4, propVal);
}

LPUNKNOWN CSpreadSheet::GetDataSource()
{
	LPUNKNOWN result;
	GetProperty(0x23, VT_UNKNOWN, (void*)&result);
	return result;
}

void CSpreadSheet::SetDataSource(LPUNKNOWN propVal)
{
	SetProperty(0x23, VT_UNKNOWN, propVal);
}

BOOL CSpreadSheet::GetDAutoCellTypes()
{
	BOOL result;
	GetProperty(0x24, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetDAutoCellTypes(BOOL propVal)
{
	SetProperty(0x24, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetDAutoFill()
{
	BOOL result;
	GetProperty(0x25, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetDAutoFill(BOOL propVal)
{
	SetProperty(0x25, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetDAutoHeadings()
{
	BOOL result;
	GetProperty(0x26, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetDAutoHeadings(BOOL propVal)
{
	SetProperty(0x26, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetDAutoSave()
{
	BOOL result;
	GetProperty(0x27, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetDAutoSave(BOOL propVal)
{
	SetProperty(0x27, VT_BOOL, propVal);
}

long CSpreadSheet::GetDAutoSizeCols()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetDAutoSizeCols(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}

long CSpreadSheet::GetDestCol()
{
	long result;
	GetProperty(0x29, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetDestCol(long propVal)
{
	SetProperty(0x29, VT_I4, propVal);
}

long CSpreadSheet::GetDestRow()
{
	long result;
	GetProperty(0x2a, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetDestRow(long propVal)
{
	SetProperty(0x2a, VT_I4, propVal);
}

BOOL CSpreadSheet::GetDInformActiveRowChange()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetDInformActiveRowChange(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetDisplayColHeaders()
{
	BOOL result;
	GetProperty(0x2c, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetDisplayColHeaders(BOOL propVal)
{
	SetProperty(0x2c, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetDisplayRowHeaders()
{
	BOOL result;
	GetProperty(0x2d, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetDisplayRowHeaders(BOOL propVal)
{
	SetProperty(0x2d, VT_BOOL, propVal);
}

long CSpreadSheet::GetEditEnterAction()
{
	long result;
	GetProperty(0x2e, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetEditEnterAction(long propVal)
{
	SetProperty(0x2e, VT_I4, propVal);
}

BOOL CSpreadSheet::GetEditMode()
{
	BOOL result;
	GetProperty(0x2f, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetEditMode(BOOL propVal)
{
	SetProperty(0x2f, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetEditModePermanent()
{
	BOOL result;
	GetProperty(0x30, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetEditModePermanent(BOOL propVal)
{
	SetProperty(0x30, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetEditModeReplace()
{
	BOOL result;
	GetProperty(0x31, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetEditModeReplace(BOOL propVal)
{
	SetProperty(0x31, VT_BOOL, propVal);
}

short CSpreadSheet::GetFileNum()
{
	short result;
	GetProperty(0x32, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetFileNum(short propVal)
{
	SetProperty(0x32, VT_I2, propVal);
}

short CSpreadSheet::GetFloatDefCurrencyChar()
{
	short result;
	GetProperty(0x33, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetFloatDefCurrencyChar(short propVal)
{
	SetProperty(0x33, VT_I2, propVal);
}

short CSpreadSheet::GetFloatDefDecimalChar()
{
	short result;
	GetProperty(0x34, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetFloatDefDecimalChar(short propVal)
{
	SetProperty(0x34, VT_I2, propVal);
}

short CSpreadSheet::GetFloatDefSepChar()
{
	short result;
	GetProperty(0x35, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetFloatDefSepChar(short propVal)
{
	SetProperty(0x35, VT_I2, propVal);
}

CString CSpreadSheet::GetFormula()
{
	CString result;
	GetProperty(0x36, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetFormula(LPCTSTR propVal)
{
	SetProperty(0x36, VT_BSTR, propVal);
}

unsigned long CSpreadSheet::GetGrayAreaBackColor()
{
	unsigned long result;
	GetProperty(0x37, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetGrayAreaBackColor(unsigned long propVal)
{
	SetProperty(0x37, VT_I4, propVal);
}

unsigned long CSpreadSheet::GetGridColor()
{
	unsigned long result;
	GetProperty(0x38, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetGridColor(unsigned long propVal)
{
	SetProperty(0x38, VT_I4, propVal);
}

BOOL CSpreadSheet::GetGridShowHoriz()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetGridShowHoriz(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetGridShowVert()
{
	BOOL result;
	GetProperty(0x3a, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetGridShowVert(BOOL propVal)
{
	SetProperty(0x3a, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetGridSolid()
{
	BOOL result;
	GetProperty(0x3b, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetGridSolid(BOOL propVal)
{
	SetProperty(0x3b, VT_BOOL, propVal);
}

long CSpreadSheet::GetHDCPrinter()
{
	long result;
	GetProperty(0x3c, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetHDCPrinter(long propVal)
{
	SetProperty(0x3c, VT_I4, propVal);
}

short CSpreadSheet::GetInterfaceDesigner()
{
	short result;
	GetProperty(0x3d, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetInterfaceDesigner(short propVal)
{
	SetProperty(0x3d, VT_I2, propVal);
}

BOOL CSpreadSheet::GetIsBlockSelected()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetIsBlockSelected(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}

long CSpreadSheet::GetLeftCol()
{
	long result;
	GetProperty(0x3f, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetLeftCol(long propVal)
{
	SetProperty(0x3f, VT_I4, propVal);
}

BOOL CSpreadSheet::GetLock()
{
	BOOL result;
	GetProperty(0x40, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetLock(BOOL propVal)
{
	SetProperty(0x40, VT_BOOL, propVal);
}

unsigned long CSpreadSheet::GetLockBackColor()
{
	unsigned long result;
	GetProperty(0x41, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetLockBackColor(unsigned long propVal)
{
	SetProperty(0x41, VT_I4, propVal);
}

unsigned long CSpreadSheet::GetLockForeColor()
{
	unsigned long result;
	GetProperty(0x42, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetLockForeColor(unsigned long propVal)
{
	SetProperty(0x42, VT_I4, propVal);
}

long CSpreadSheet::GetMaxCols()
{
	long result;
	GetProperty(0x43, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetMaxCols(long propVal)
{
	SetProperty(0x43, VT_I4, propVal);
}

long CSpreadSheet::GetMaxRows()
{
	long result;
	GetProperty(0x44, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetMaxRows(long propVal)
{
	SetProperty(0x44, VT_I4, propVal);
}

double CSpreadSheet::GetMaxTextCellHeight()
{
	double result;
	GetProperty(0x45, VT_R8, (void*)&result);
	return result;
}

void CSpreadSheet::SetMaxTextCellHeight(double propVal)
{
	SetProperty(0x45, VT_R8, propVal);
}

double CSpreadSheet::GetMaxTextCellWidth()
{
	double result;
	GetProperty(0x46, VT_R8, (void*)&result);
	return result;
}

void CSpreadSheet::SetMaxTextCellWidth(double propVal)
{
	SetProperty(0x46, VT_R8, propVal);
}

BOOL CSpreadSheet::GetMoveActiveOnFocus()
{
	BOOL result;
	GetProperty(0x47, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetMoveActiveOnFocus(BOOL propVal)
{
	SetProperty(0x47, VT_BOOL, propVal);
}

long CSpreadSheet::GetMultiSelCount()
{
	long result;
	GetProperty(0x48, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetMultiSelCount(long propVal)
{
	SetProperty(0x48, VT_I4, propVal);
}

long CSpreadSheet::GetMultiSelIndex()
{
	long result;
	GetProperty(0x49, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetMultiSelIndex(long propVal)
{
	SetProperty(0x49, VT_I4, propVal);
}

BOOL CSpreadSheet::GetNoBeep()
{
	BOOL result;
	GetProperty(0x4a, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetNoBeep(BOOL propVal)
{
	SetProperty(0x4a, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetNoBorder()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetNoBorder(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}

long CSpreadSheet::GetOperationMode()
{
	long result;
	GetProperty(0x4c, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetOperationMode(long propVal)
{
	SetProperty(0x4c, VT_I4, propVal);
}

long CSpreadSheet::GetPosition()
{
	long result;
	GetProperty(0x4d, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPosition(long propVal)
{
	SetProperty(0x4d, VT_I4, propVal);
}

CString CSpreadSheet::GetPrintAbortMsg()
{
	CString result;
	GetProperty(0x4e, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintAbortMsg(LPCTSTR propVal)
{
	SetProperty(0x4e, VT_BSTR, propVal);
}

BOOL CSpreadSheet::GetPrintBorder()
{
	BOOL result;
	GetProperty(0x4f, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintBorder(BOOL propVal)
{
	SetProperty(0x4f, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetPrintColHeaders()
{
	BOOL result;
	GetProperty(0x50, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintColHeaders(BOOL propVal)
{
	SetProperty(0x50, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetPrintColor()
{
	BOOL result;
	GetProperty(0x51, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintColor(BOOL propVal)
{
	SetProperty(0x51, VT_BOOL, propVal);
}

CString CSpreadSheet::GetPrintFooter()
{
	CString result;
	GetProperty(0x52, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintFooter(LPCTSTR propVal)
{
	SetProperty(0x52, VT_BSTR, propVal);
}

BOOL CSpreadSheet::GetPrintGrid()
{
	BOOL result;
	GetProperty(0x53, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintGrid(BOOL propVal)
{
	SetProperty(0x53, VT_BOOL, propVal);
}

CString CSpreadSheet::GetPrintHeader()
{
	CString result;
	GetProperty(0x54, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintHeader(LPCTSTR propVal)
{
	SetProperty(0x54, VT_BSTR, propVal);
}

CString CSpreadSheet::GetPrintJobName()
{
	CString result;
	GetProperty(0x55, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintJobName(LPCTSTR propVal)
{
	SetProperty(0x55, VT_BSTR, propVal);
}

long CSpreadSheet::GetPrintMarginBottom()
{
	long result;
	GetProperty(0x56, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintMarginBottom(long propVal)
{
	SetProperty(0x56, VT_I4, propVal);
}

long CSpreadSheet::GetPrintMarginLeft()
{
	long result;
	GetProperty(0x57, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintMarginLeft(long propVal)
{
	SetProperty(0x57, VT_I4, propVal);
}

long CSpreadSheet::GetPrintMarginRight()
{
	long result;
	GetProperty(0x58, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintMarginRight(long propVal)
{
	SetProperty(0x58, VT_I4, propVal);
}

long CSpreadSheet::GetPrintMarginTop()
{
	long result;
	GetProperty(0x59, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintMarginTop(long propVal)
{
	SetProperty(0x59, VT_I4, propVal);
}

short CSpreadSheet::GetPrintPageEnd()
{
	short result;
	GetProperty(0x5a, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintPageEnd(short propVal)
{
	SetProperty(0x5a, VT_I2, propVal);
}

short CSpreadSheet::GetPrintPageStart()
{
	short result;
	GetProperty(0x5b, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintPageStart(short propVal)
{
	SetProperty(0x5b, VT_I2, propVal);
}

BOOL CSpreadSheet::GetPrintRowHeaders()
{
	BOOL result;
	GetProperty(0x5c, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintRowHeaders(BOOL propVal)
{
	SetProperty(0x5c, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetPrintShadows()
{
	BOOL result;
	GetProperty(0x5d, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintShadows(BOOL propVal)
{
	SetProperty(0x5d, VT_BOOL, propVal);
}

long CSpreadSheet::GetPrintType()
{
	long result;
	GetProperty(0x5e, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintType(long propVal)
{
	SetProperty(0x5e, VT_I4, propVal);
}

BOOL CSpreadSheet::GetPrintUseDataMax()
{
	BOOL result;
	GetProperty(0x5f, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintUseDataMax(BOOL propVal)
{
	SetProperty(0x5f, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetProcessTab()
{
	BOOL result;
	GetProperty(0x60, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetProcessTab(BOOL propVal)
{
	SetProperty(0x60, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetProtect()
{
	BOOL result;
	GetProperty(0x61, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetProtect(BOOL propVal)
{
	SetProperty(0x61, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetReDraw()
{
	BOOL result;
	GetProperty(0x62, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetReDraw(BOOL propVal)
{
	SetProperty(0x62, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetRestrictCols()
{
	BOOL result;
	GetProperty(0x63, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetRestrictCols(BOOL propVal)
{
	SetProperty(0x63, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetRestrictRows()
{
	BOOL result;
	GetProperty(0x64, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetRestrictRows(BOOL propVal)
{
	SetProperty(0x64, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetRetainSelBlock()
{
	BOOL result;
	GetProperty(0x65, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetRetainSelBlock(BOOL propVal)
{
	SetProperty(0x65, VT_BOOL, propVal);
}

long CSpreadSheet::GetRow()
{
	long result;
	GetProperty(0x66, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetRow(long propVal)
{
	SetProperty(0x66, VT_I4, propVal);
}

long CSpreadSheet::GetRow2()
{
	long result;
	GetProperty(0x67, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetRow2(long propVal)
{
	SetProperty(0x67, VT_I4, propVal);
}

long CSpreadSheet::GetRowHeaderDisplay()
{
	long result;
	GetProperty(0x68, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetRowHeaderDisplay(long propVal)
{
	SetProperty(0x68, VT_I4, propVal);
}

BOOL CSpreadSheet::GetRowHidden()
{
	BOOL result;
	GetProperty(0x69, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetRowHidden(BOOL propVal)
{
	SetProperty(0x69, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetRowPageBreak()
{
	BOOL result;
	GetProperty(0x6a, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetRowPageBreak(BOOL propVal)
{
	SetProperty(0x6a, VT_BOOL, propVal);
}

long CSpreadSheet::GetRowsFrozen()
{
	long result;
	GetProperty(0x6b, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetRowsFrozen(long propVal)
{
	SetProperty(0x6b, VT_I4, propVal);
}

BOOL CSpreadSheet::GetScrollBarExtMode()
{
	BOOL result;
	GetProperty(0x6c, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetScrollBarExtMode(BOOL propVal)
{
	SetProperty(0x6c, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetScrollBarMaxAlign()
{
	BOOL result;
	GetProperty(0x6d, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetScrollBarMaxAlign(BOOL propVal)
{
	SetProperty(0x6d, VT_BOOL, propVal);
}

long CSpreadSheet::GetScrollBars()
{
	long result;
	GetProperty(0x6e, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetScrollBars(long propVal)
{
	SetProperty(0x6e, VT_I4, propVal);
}

BOOL CSpreadSheet::GetScrollBarShowMax()
{
	BOOL result;
	GetProperty(0x6f, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetScrollBarShowMax(BOOL propVal)
{
	SetProperty(0x6f, VT_BOOL, propVal);
}

long CSpreadSheet::GetSelBlockCol()
{
	long result;
	GetProperty(0x70, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelBlockCol(long propVal)
{
	SetProperty(0x70, VT_I4, propVal);
}

long CSpreadSheet::GetSelBlockCol2()
{
	long result;
	GetProperty(0x71, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelBlockCol2(long propVal)
{
	SetProperty(0x71, VT_I4, propVal);
}

long CSpreadSheet::GetSelBlockRow()
{
	long result;
	GetProperty(0x72, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelBlockRow(long propVal)
{
	SetProperty(0x72, VT_I4, propVal);
}

long CSpreadSheet::GetSelBlockRow2()
{
	long result;
	GetProperty(0x73, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelBlockRow2(long propVal)
{
	SetProperty(0x73, VT_I4, propVal);
}

short CSpreadSheet::GetSelectBlockOptions()
{
	short result;
	GetProperty(0x74, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelectBlockOptions(short propVal)
{
	SetProperty(0x74, VT_I2, propVal);
}

long CSpreadSheet::GetSelLength()
{
	long result;
	GetProperty(0x75, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelLength(long propVal)
{
	SetProperty(0x75, VT_I4, propVal);
}

long CSpreadSheet::GetSelModeIndex()
{
	long result;
	GetProperty(0x76, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelModeIndex(long propVal)
{
	SetProperty(0x76, VT_I4, propVal);
}

long CSpreadSheet::GetSelModeSelCount()
{
	long result;
	GetProperty(0x77, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelModeSelCount(long propVal)
{
	SetProperty(0x77, VT_I4, propVal);
}

BOOL CSpreadSheet::GetSelModeSelected()
{
	BOOL result;
	GetProperty(0x78, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelModeSelected(BOOL propVal)
{
	SetProperty(0x78, VT_BOOL, propVal);
}

long CSpreadSheet::GetSelStart()
{
	long result;
	GetProperty(0x79, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelStart(long propVal)
{
	SetProperty(0x79, VT_I4, propVal);
}

CString CSpreadSheet::GetSelText()
{
	CString result;
	GetProperty(0x7a, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelText(LPCTSTR propVal)
{
	SetProperty(0x7a, VT_BSTR, propVal);
}

unsigned long CSpreadSheet::GetShadowColor()
{
	unsigned long result;
	GetProperty(0x7b, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetShadowColor(unsigned long propVal)
{
	SetProperty(0x7b, VT_I4, propVal);
}

unsigned long CSpreadSheet::GetShadowDark()
{
	unsigned long result;
	GetProperty(0x7c, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetShadowDark(unsigned long propVal)
{
	SetProperty(0x7c, VT_I4, propVal);
}

unsigned long CSpreadSheet::GetShadowText()
{
	unsigned long result;
	GetProperty(0x7d, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetShadowText(unsigned long propVal)
{
	SetProperty(0x7d, VT_I4, propVal);
}

long CSpreadSheet::GetSortBy()
{
	long result;
	GetProperty(0x7e, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSortBy(long propVal)
{
	SetProperty(0x7e, VT_I4, propVal);
}

long CSpreadSheet::GetStartingColNumber()
{
	long result;
	GetProperty(0x7f, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetStartingColNumber(long propVal)
{
	SetProperty(0x7f, VT_I4, propVal);
}

long CSpreadSheet::GetStartingRowNumber()
{
	long result;
	GetProperty(0x80, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetStartingRowNumber(long propVal)
{
	SetProperty(0x80, VT_I4, propVal);
}

long CSpreadSheet::GetTopRow()
{
	long result;
	GetProperty(0x81, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTopRow(long propVal)
{
	SetProperty(0x81, VT_I4, propVal);
}

long CSpreadSheet::GetTypeButtonAlign()
{
	long result;
	GetProperty(0x82, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeButtonAlign(long propVal)
{
	SetProperty(0x82, VT_I4, propVal);
}

unsigned long CSpreadSheet::GetTypeButtonBorderColor()
{
	unsigned long result;
	GetProperty(0x83, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeButtonBorderColor(unsigned long propVal)
{
	SetProperty(0x83, VT_I4, propVal);
}

unsigned long CSpreadSheet::GetTypeButtonColor()
{
	unsigned long result;
	GetProperty(0x84, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeButtonColor(unsigned long propVal)
{
	SetProperty(0x84, VT_I4, propVal);
}

unsigned long CSpreadSheet::GetTypeButtonDarkColor()
{
	unsigned long result;
	GetProperty(0x85, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeButtonDarkColor(unsigned long propVal)
{
	SetProperty(0x85, VT_I4, propVal);
}

unsigned long CSpreadSheet::GetTypeButtonLightColor()
{
	unsigned long result;
	GetProperty(0x86, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeButtonLightColor(unsigned long propVal)
{
	SetProperty(0x86, VT_I4, propVal);
}

CPicture CSpreadSheet::GetTypeButtonPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0x87, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CSpreadSheet::SetTypeButtonPicture(LPDISPATCH propVal)
{
	SetProperty(0x87, VT_DISPATCH, propVal);
}

CPicture CSpreadSheet::GetTypeButtonPictureDown()
{
	LPDISPATCH pDispatch;
	GetProperty(0x88, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CSpreadSheet::SetTypeButtonPictureDown(LPDISPATCH propVal)
{
	SetProperty(0x88, VT_DISPATCH, propVal);
}

short CSpreadSheet::GetTypeButtonShadowSize()
{
	short result;
	GetProperty(0x89, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeButtonShadowSize(short propVal)
{
	SetProperty(0x89, VT_I2, propVal);
}

CString CSpreadSheet::GetTypeButtonText()
{
	CString result;
	GetProperty(0x8a, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeButtonText(LPCTSTR propVal)
{
	SetProperty(0x8a, VT_BSTR, propVal);
}

unsigned long CSpreadSheet::GetTypeButtonTextColor()
{
	unsigned long result;
	GetProperty(0x8b, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeButtonTextColor(unsigned long propVal)
{
	SetProperty(0x8b, VT_I4, propVal);
}

long CSpreadSheet::GetTypeButtonType()
{
	long result;
	GetProperty(0x8c, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeButtonType(long propVal)
{
	SetProperty(0x8c, VT_I4, propVal);
}

BOOL CSpreadSheet::GetTypeCheckCenter()
{
	BOOL result;
	GetProperty(0x8d, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeCheckCenter(BOOL propVal)
{
	SetProperty(0x8d, VT_BOOL, propVal);
}

CString CSpreadSheet::GetTypeCheckText()
{
	CString result;
	GetProperty(0x8e, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeCheckText(LPCTSTR propVal)
{
	SetProperty(0x8e, VT_BSTR, propVal);
}

long CSpreadSheet::GetTypeCheckTextAlign()
{
	long result;
	GetProperty(0x8f, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeCheckTextAlign(long propVal)
{
	SetProperty(0x8f, VT_I4, propVal);
}

short CSpreadSheet::GetTypeComboBoxCount()
{
	short result;
	GetProperty(0x90, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeComboBoxCount(short propVal)
{
	SetProperty(0x90, VT_I2, propVal);
}

short CSpreadSheet::GetTypeComboBoxCurSel()
{
	short result;
	GetProperty(0x91, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeComboBoxCurSel(short propVal)
{
	SetProperty(0x91, VT_I2, propVal);
}

BOOL CSpreadSheet::GetTypeComboBoxEditable()
{
	BOOL result;
	GetProperty(0x92, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeComboBoxEditable(BOOL propVal)
{
	SetProperty(0x92, VT_BOOL, propVal);
}

short CSpreadSheet::GetTypeComboBoxIndex()
{
	short result;
	GetProperty(0x93, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeComboBoxIndex(short propVal)
{
	SetProperty(0x93, VT_I2, propVal);
}

CString CSpreadSheet::GetTypeComboBoxList()
{
	CString result;
	GetProperty(0x94, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeComboBoxList(LPCTSTR propVal)
{
	SetProperty(0x94, VT_BSTR, propVal);
}

CString CSpreadSheet::GetTypeComboBoxString()
{
	CString result;
	GetProperty(0x95, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeComboBoxString(LPCTSTR propVal)
{
	SetProperty(0x95, VT_BSTR, propVal);
}

BOOL CSpreadSheet::GetTypeDateCentury()
{
	BOOL result;
	GetProperty(0x96, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeDateCentury(BOOL propVal)
{
	SetProperty(0x96, VT_BOOL, propVal);
}

long CSpreadSheet::GetTypeDateFormat()
{
	long result;
	GetProperty(0x97, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeDateFormat(long propVal)
{
	SetProperty(0x97, VT_I4, propVal);
}

CString CSpreadSheet::GetTypeDateMax()
{
	CString result;
	GetProperty(0x98, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeDateMax(LPCTSTR propVal)
{
	SetProperty(0x98, VT_BSTR, propVal);
}

CString CSpreadSheet::GetTypeDateMin()
{
	CString result;
	GetProperty(0x99, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeDateMin(LPCTSTR propVal)
{
	SetProperty(0x99, VT_BSTR, propVal);
}

short CSpreadSheet::GetTypeDateSeparator()
{
	short result;
	GetProperty(0x9a, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeDateSeparator(short propVal)
{
	SetProperty(0x9a, VT_I2, propVal);
}

long CSpreadSheet::GetTypeEditCharCase()
{
	long result;
	GetProperty(0x9b, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeEditCharCase(long propVal)
{
	SetProperty(0x9b, VT_I4, propVal);
}

long CSpreadSheet::GetTypeEditCharSet()
{
	long result;
	GetProperty(0x9c, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeEditCharSet(long propVal)
{
	SetProperty(0x9c, VT_I4, propVal);
}

BOOL CSpreadSheet::GetTypeEditMultiLine()
{
	BOOL result;
	GetProperty(0x9e, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeEditMultiLine(BOOL propVal)
{
	SetProperty(0x9e, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetTypeEditPassword()
{
	BOOL result;
	GetProperty(0x9f, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeEditPassword(BOOL propVal)
{
	SetProperty(0x9f, VT_BOOL, propVal);
}

short CSpreadSheet::GetTypeFloatCurrencyChar()
{
	short result;
	GetProperty(0xa0, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeFloatCurrencyChar(short propVal)
{
	SetProperty(0xa0, VT_I2, propVal);
}

short CSpreadSheet::GetTypeFloatDecimalChar()
{
	short result;
	GetProperty(0xa1, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeFloatDecimalChar(short propVal)
{
	SetProperty(0xa1, VT_I2, propVal);
}

short CSpreadSheet::GetTypeFloatDecimalPlaces()
{
	short result;
	GetProperty(0xa2, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeFloatDecimalPlaces(short propVal)
{
	SetProperty(0xa2, VT_I2, propVal);
}

double CSpreadSheet::GetTypeFloatMax()
{
	double result;
	GetProperty(0xa3, VT_R8, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeFloatMax(double propVal)
{
	SetProperty(0xa3, VT_R8, propVal);
}

double CSpreadSheet::GetTypeFloatMin()
{
	double result;
	GetProperty(0xa4, VT_R8, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeFloatMin(double propVal)
{
	SetProperty(0xa4, VT_R8, propVal);
}

BOOL CSpreadSheet::GetTypeFloatMoney()
{
	BOOL result;
	GetProperty(0xa5, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeFloatMoney(BOOL propVal)
{
	SetProperty(0xa5, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetTypeFloatSeparator()
{
	BOOL result;
	GetProperty(0xa6, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeFloatSeparator(BOOL propVal)
{
	SetProperty(0xa6, VT_BOOL, propVal);
}

short CSpreadSheet::GetTypeFloatSepChar()
{
	short result;
	GetProperty(0xa7, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeFloatSepChar(short propVal)
{
	SetProperty(0xa7, VT_I2, propVal);
}

long CSpreadSheet::GetTypeHAlign()
{
	long result;
	GetProperty(0xa8, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeHAlign(long propVal)
{
	SetProperty(0xa8, VT_I4, propVal);
}

long CSpreadSheet::GetTypeIntegerMax()
{
	long result;
	GetProperty(0xa9, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeIntegerMax(long propVal)
{
	SetProperty(0xa9, VT_I4, propVal);
}

long CSpreadSheet::GetTypeIntegerMin()
{
	long result;
	GetProperty(0xaa, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeIntegerMin(long propVal)
{
	SetProperty(0xaa, VT_I4, propVal);
}

long CSpreadSheet::GetTypeIntegerSpinInc()
{
	long result;
	GetProperty(0xab, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeIntegerSpinInc(long propVal)
{
	SetProperty(0xab, VT_I4, propVal);
}

BOOL CSpreadSheet::GetTypeIntegerSpinWrap()
{
	BOOL result;
	GetProperty(0xac, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeIntegerSpinWrap(BOOL propVal)
{
	SetProperty(0xac, VT_BOOL, propVal);
}

long CSpreadSheet::GetTypeOwnerDrawStyle()
{
	long result;
	GetProperty(0xad, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeOwnerDrawStyle(long propVal)
{
	SetProperty(0xad, VT_I4, propVal);
}

CString CSpreadSheet::GetTypePicDefaultText()
{
	CString result;
	GetProperty(0xae, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypePicDefaultText(LPCTSTR propVal)
{
	SetProperty(0xae, VT_BSTR, propVal);
}

CString CSpreadSheet::GetTypePicMask()
{
	CString result;
	GetProperty(0xaf, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypePicMask(LPCTSTR propVal)
{
	SetProperty(0xaf, VT_BSTR, propVal);
}

BOOL CSpreadSheet::GetTypePictCenter()
{
	BOOL result;
	GetProperty(0xb0, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypePictCenter(BOOL propVal)
{
	SetProperty(0xb0, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetTypePictMaintainScale()
{
	BOOL result;
	GetProperty(0xb1, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypePictMaintainScale(BOOL propVal)
{
	SetProperty(0xb1, VT_BOOL, propVal);
}

CPicture CSpreadSheet::GetTypePictPicture()
{
	LPDISPATCH pDispatch;
	GetProperty(0xb2, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CSpreadSheet::SetTypePictPicture(LPDISPATCH propVal)
{
	SetProperty(0xb2, VT_DISPATCH, propVal);
}

BOOL CSpreadSheet::GetTypePictStretch()
{
	BOOL result;
	GetProperty(0xb3, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypePictStretch(BOOL propVal)
{
	SetProperty(0xb3, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetTypeSpin()
{
	BOOL result;
	GetProperty(0xb4, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeSpin(BOOL propVal)
{
	SetProperty(0xb4, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetTypeTextPrefix()
{
	BOOL result;
	GetProperty(0xb6, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeTextPrefix(BOOL propVal)
{
	SetProperty(0xb6, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetTypeTextShadow()
{
	BOOL result;
	GetProperty(0xb7, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeTextShadow(BOOL propVal)
{
	SetProperty(0xb7, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetTypeTextShadowIn()
{
	BOOL result;
	GetProperty(0xb8, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeTextShadowIn(BOOL propVal)
{
	SetProperty(0xb8, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetTypeTextWordWrap()
{
	BOOL result;
	GetProperty(0xb9, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeTextWordWrap(BOOL propVal)
{
	SetProperty(0xb9, VT_BOOL, propVal);
}

long CSpreadSheet::GetTypeTime24Hour()
{
	long result;
	GetProperty(0xba, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeTime24Hour(long propVal)
{
	SetProperty(0xba, VT_I4, propVal);
}

CString CSpreadSheet::GetTypeTimeMax()
{
	CString result;
	GetProperty(0xbb, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeTimeMax(LPCTSTR propVal)
{
	SetProperty(0xbb, VT_BSTR, propVal);
}

CString CSpreadSheet::GetTypeTimeMin()
{
	CString result;
	GetProperty(0xbc, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeTimeMin(LPCTSTR propVal)
{
	SetProperty(0xbc, VT_BSTR, propVal);
}

BOOL CSpreadSheet::GetTypeTimeSeconds()
{
	BOOL result;
	GetProperty(0xbd, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeTimeSeconds(BOOL propVal)
{
	SetProperty(0xbd, VT_BOOL, propVal);
}

short CSpreadSheet::GetTypeTimeSeparator()
{
	short result;
	GetProperty(0xbe, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeTimeSeparator(short propVal)
{
	SetProperty(0xbe, VT_I2, propVal);
}

long CSpreadSheet::GetUnitType()
{
	long result;
	GetProperty(0xbf, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetUnitType(long propVal)
{
	SetProperty(0xbf, VT_I4, propVal);
}

long CSpreadSheet::GetUserResize()
{
	long result;
	GetProperty(0xc0, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetUserResize(long propVal)
{
	SetProperty(0xc0, VT_I4, propVal);
}

long CSpreadSheet::GetUserResizeCol()
{
	long result;
	GetProperty(0xc1, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetUserResizeCol(long propVal)
{
	SetProperty(0xc1, VT_I4, propVal);
}

long CSpreadSheet::GetUserResizeRow()
{
	long result;
	GetProperty(0xc2, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetUserResizeRow(long propVal)
{
	SetProperty(0xc2, VT_I4, propVal);
}

CString CSpreadSheet::GetValue()
{
	CString result;
	GetProperty(0xc3, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetValue(LPCTSTR propVal)
{
	SetProperty(0xc3, VT_BSTR, propVal);
}

long CSpreadSheet::GetVirtualCurRowCount()
{
	long result;
	GetProperty(0xc4, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetVirtualCurRowCount(long propVal)
{
	SetProperty(0xc4, VT_I4, propVal);
}

long CSpreadSheet::GetVirtualCurTop()
{
	long result;
	GetProperty(0xc5, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetVirtualCurTop(long propVal)
{
	SetProperty(0xc5, VT_I4, propVal);
}

long CSpreadSheet::GetVirtualMaxRows()
{
	long result;
	GetProperty(0xc6, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetVirtualMaxRows(long propVal)
{
	SetProperty(0xc6, VT_I4, propVal);
}

BOOL CSpreadSheet::GetVirtualMode()
{
	BOOL result;
	GetProperty(0xc7, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetVirtualMode(BOOL propVal)
{
	SetProperty(0xc7, VT_BOOL, propVal);
}

long CSpreadSheet::GetVirtualOverlap()
{
	long result;
	GetProperty(0xc8, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetVirtualOverlap(long propVal)
{
	SetProperty(0xc8, VT_I4, propVal);
}

long CSpreadSheet::GetVirtualRows()
{
	long result;
	GetProperty(0xc9, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetVirtualRows(long propVal)
{
	SetProperty(0xc9, VT_I4, propVal);
}

BOOL CSpreadSheet::GetVirtualScrollBuffer()
{
	BOOL result;
	GetProperty(0xca, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetVirtualScrollBuffer(BOOL propVal)
{
	SetProperty(0xca, VT_BOOL, propVal);
}

long CSpreadSheet::GetVisibleCols()
{
	long result;
	GetProperty(0xcb, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetVisibleCols(long propVal)
{
	SetProperty(0xcb, VT_I4, propVal);
}

long CSpreadSheet::GetVisibleRows()
{
	long result;
	GetProperty(0xcc, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetVisibleRows(long propVal)
{
	SetProperty(0xcc, VT_I4, propVal);
}

BOOL CSpreadSheet::GetVScrollSpecial()
{
	BOOL result;
	GetProperty(0xcd, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetVScrollSpecial(BOOL propVal)
{
	SetProperty(0xcd, VT_BOOL, propVal);
}

short CSpreadSheet::GetVScrollSpecialType()
{
	short result;
	GetProperty(0xce, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetVScrollSpecialType(short propVal)
{
	SetProperty(0xce, VT_I2, propVal);
}

BOOL CSpreadSheet::GetFontBold()
{
	BOOL result;
	GetProperty(0xcf, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetFontBold(BOOL propVal)
{
	SetProperty(0xcf, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetFontItalic()
{
	BOOL result;
	GetProperty(0xd0, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetFontItalic(BOOL propVal)
{
	SetProperty(0xd0, VT_BOOL, propVal);
}

CString CSpreadSheet::GetFontName()
{
	CString result;
	GetProperty(0xd1, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetFontName(LPCTSTR propVal)
{
	SetProperty(0xd1, VT_BSTR, propVal);
}

float CSpreadSheet::GetFontSize()
{
	float result;
	GetProperty(0xd2, VT_R4, (void*)&result);
	return result;
}

void CSpreadSheet::SetFontSize(float propVal)
{
	SetProperty(0xd2, VT_R4, propVal);
}

BOOL CSpreadSheet::GetFontStrikethru()
{
	BOOL result;
	GetProperty(0xd3, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetFontStrikethru(BOOL propVal)
{
	SetProperty(0xd3, VT_BOOL, propVal);
}

BOOL CSpreadSheet::GetFontUnderline()
{
	BOOL result;
	GetProperty(0xd4, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetFontUnderline(BOOL propVal)
{
	SetProperty(0xd4, VT_BOOL, propVal);
}

CPicture CSpreadSheet::GetCursorIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0xd5, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CSpreadSheet::SetCursorIcon(LPDISPATCH propVal)
{
	SetProperty(0xd5, VT_DISPATCH, propVal);
}

long CSpreadSheet::GetPrintOrientation()
{
	long result;
	GetProperty(0xd6, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintOrientation(long propVal)
{
	SetProperty(0xd6, VT_I4, propVal);
}

long CSpreadSheet::GetBackColorStyle()
{
	long result;
	GetProperty(0xd7, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetBackColorStyle(long propVal)
{
	SetProperty(0xd7, VT_I4, propVal);
}

BOOL CSpreadSheet::GetFormulaSync()
{
	BOOL result;
	GetProperty(0xd8, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetFormulaSync(BOOL propVal)
{
	SetProperty(0xd8, VT_BOOL, propVal);
}

long CSpreadSheet::GetTypeCheckType()
{
	long result;
	GetProperty(0x110, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeCheckType(long propVal)
{
	SetProperty(0x110, VT_I4, propVal);
}

long CSpreadSheet::GetAppearance()
{
	long result;
	GetProperty(0x111, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetAppearance(long propVal)
{
	SetProperty(0x111, VT_I4, propVal);
}

short CSpreadSheet::GetTypeComboBoxMaxDrop()
{
	short result;
	GetProperty(0x112, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeComboBoxMaxDrop(short propVal)
{
	SetProperty(0x112, VT_I2, propVal);
}

short CSpreadSheet::GetTypeMaxEditLen()
{
	short result;
	GetProperty(0x113, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeMaxEditLen(short propVal)
{
	SetProperty(0x113, VT_I2, propVal);
}

short CSpreadSheet::GetTypeComboBoxWidth()
{
	short result;
	GetProperty(0x114, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeComboBoxWidth(short propVal)
{
	SetProperty(0x114, VT_I2, propVal);
}

long CSpreadSheet::GetTextTip()
{
	long result;
	GetProperty(0x115, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTextTip(long propVal)
{
	SetProperty(0x115, VT_I4, propVal);
}

long CSpreadSheet::GetTextTipDelay()
{
	long result;
	GetProperty(0x116, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTextTipDelay(long propVal)
{
	SetProperty(0x116, VT_I4, propVal);
}

long CSpreadSheet::GetScrollBarTrack()
{
	long result;
	GetProperty(0x117, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetScrollBarTrack(long propVal)
{
	SetProperty(0x117, VT_I4, propVal);
}

long CSpreadSheet::GetTypeVAlign()
{
	long result;
	GetProperty(0x118, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeVAlign(long propVal)
{
	SetProperty(0x118, VT_I4, propVal);
}

short CSpreadSheet::GetClipboardOptions()
{
	short result;
	GetProperty(0x119, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetClipboardOptions(short propVal)
{
	SetProperty(0x119, VT_I2, propVal);
}

BOOL CSpreadSheet::GetPrintSmartPrint()
{
	BOOL result;
	GetProperty(0x11a, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintSmartPrint(BOOL propVal)
{
	SetProperty(0x11a, VT_BOOL, propVal);
}

long CSpreadSheet::GetPrintPageOrder()
{
	long result;
	GetProperty(0x11b, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintPageOrder(long propVal)
{
	SetProperty(0x11b, VT_I4, propVal);
}

long CSpreadSheet::GetPrintPageCount()
{
	long result;
	GetProperty(0x11c, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintPageCount(long propVal)
{
	SetProperty(0x11c, VT_I4, propVal);
}

long CSpreadSheet::GetPrintFirstPageNumber()
{
	long result;
	GetProperty(0x11d, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintFirstPageNumber(long propVal)
{
	SetProperty(0x11d, VT_I4, propVal);
}

long CSpreadSheet::GetPrintNextPageBreakCol()
{
	long result;
	GetProperty(0x11e, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintNextPageBreakCol(long propVal)
{
	SetProperty(0x11e, VT_I4, propVal);
}

long CSpreadSheet::GetPrintNextPageBreakRow()
{
	long result;
	GetProperty(0x11f, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetPrintNextPageBreakRow(long propVal)
{
	SetProperty(0x11f, VT_I4, propVal);
}

long CSpreadSheet::GetTypeComboBoxhWnd()
{
	long result;
	GetProperty(0x120, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetTypeComboBoxhWnd(long propVal)
{
	SetProperty(0x120, VT_I4, propVal);
}

unsigned long CSpreadSheet::GetSelBackColor()
{
	unsigned long result;
	GetProperty(0x121, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelBackColor(unsigned long propVal)
{
	SetProperty(0x121, VT_I4, propVal);
}

unsigned long CSpreadSheet::GetSelForeColor()
{
	unsigned long result;
	GetProperty(0x122, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetSelForeColor(unsigned long propVal)
{
	SetProperty(0x122, VT_I4, propVal);
}

short CSpreadSheet::GetTwoDigitYearMax()
{
	short result;
	GetProperty(0x123, VT_I2, (void*)&result);
	return result;
}

void CSpreadSheet::SetTwoDigitYearMax(short propVal)
{
	SetProperty(0x123, VT_I2, propVal);
}

long CSpreadSheet::GetOLEDropMode()
{
	long result;
	GetProperty(0x13b, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetOLEDropMode(long propVal)
{
	SetProperty(0x13b, VT_I4, propVal);
}

OLE_COLOR CSpreadSheet::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

short CSpreadSheet::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I4, propVal);
}

BOOL CSpreadSheet::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CSpreadSheet::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

COleFont CSpreadSheet::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CSpreadSheet::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

OLE_COLOR CSpreadSheet::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_HANDLE CSpreadSheet::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CSpreadSheet::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

CString CSpreadSheet::GetText()
{
	CString result;
	GetProperty(DISPID_TEXT, VT_BSTR, (void*)&result);
	return result;
}

void CSpreadSheet::SetText(LPCTSTR propVal)
{
	SetProperty(DISPID_TEXT, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSpreadSheet operations

double CSpreadSheet::GetColWidth(long lCol)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		lCol);
	return result;
}

void CSpreadSheet::SetColWidth(long lCol, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0xd9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lCol, newValue);
}

double CSpreadSheet::GetMaxTextColWidth(long lCol)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xda, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		lCol);
	return result;
}

void CSpreadSheet::SetMaxTextColWidth(long lCol, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0xda, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lCol, newValue);
}

double CSpreadSheet::GetMaxTextRowHeight(long lRow)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xdb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		lRow);
	return result;
}

void CSpreadSheet::SetMaxTextRowHeight(long lRow, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0xdb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lRow, newValue);
}

double CSpreadSheet::GetRowHeight(long lRow)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xdc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		lRow);
	return result;
}

void CSpreadSheet::SetRowHeight(long lRow, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0xdc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lRow, newValue);
}

long CSpreadSheet::GetSortKey(short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xdd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CSpreadSheet::SetSortKey(short nIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0xdd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

long CSpreadSheet::GetSortKeyOrder(short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xde, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CSpreadSheet::SetSortKeyOrder(short nIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0xde, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

CPicture CSpreadSheet::GetTypeCheckPicture(short Index)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xdf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Index);
	return CPicture(pDispatch);
}

void CSpreadSheet::SetTypeCheckPicture(short Index, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_DISPATCH;
	InvokeHelper(0xdf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

BOOL CSpreadSheet::AddCustomFunction(LPCTSTR FunctionName, short ParameterCnt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0xe0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FunctionName, ParameterCnt);
	return result;
}

BOOL CSpreadSheet::AddCustomFunctionExt(LPCTSTR FunctionName, short MinParamCnt, short MaxParamCnt, long Flags)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0xe1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FunctionName, MinParamCnt, MaxParamCnt, Flags);
	return result;
}

void CSpreadSheet::CFGetCellParam(short Param, long* Col, long* Row)
{
	static BYTE parms[] =
		VTS_I2 VTS_PI4 VTS_PI4;
	InvokeHelper(0xe2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Param, Col, Row);
}

double CSpreadSheet::CFGetDoubleParam(short Param)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xe3, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Param);
	return result;
}

double CSpreadSheet::CFGetDoubleParamExt(short Param, double* ParamValue)
{
	double result;
	static BYTE parms[] =
		VTS_I2 VTS_PR8;
	InvokeHelper(0xe4, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		Param, ParamValue);
	return result;
}

long CSpreadSheet::CFGetLongParam(short Param)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xe5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Param);
	return result;
}

BOOL CSpreadSheet::CFGetParamInfo(short Param, short* Type, short* Status)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_PI2 VTS_PI2;
	InvokeHelper(0xe6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Param, Type, Status);
	return result;
}

void CSpreadSheet::CFGetRangeParam(short Param, long* Col, long* Row, long* Col2, long* Row2)
{
	static BYTE parms[] =
		VTS_I2 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0xe7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Param, Col, Row, Col2, Row2);
}

CString CSpreadSheet::CFGetStringParam(short Param)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xe8, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Param);
	return result;
}

void CSpreadSheet::CFSetResult(const VARIANT& Var)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xe9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Var);
}

CString CSpreadSheet::ColNumberToLetter(long HeaderNumber)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xea, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		HeaderNumber);
	return result;
}

void CSpreadSheet::ColWidthToTwips(float Width, long* Twips)
{
	static BYTE parms[] =
		VTS_R4 VTS_PI4;
	InvokeHelper(0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Width, Twips);
}

void CSpreadSheet::GetBottomRightCell(long* Col, long* Row)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xec, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Col, Row);
}

BOOL CSpreadSheet::GetCellDirtyFlag(long Col, long Row)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xed, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row);
	return result;
}

void CSpreadSheet::GetCellFromScreenCoord(long* Col, long* Row, long x, long y)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_I4 VTS_I4;
	InvokeHelper(0xee, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Col, Row, x, y);
}

BOOL CSpreadSheet::GetCellPos(long Col, long Row, long* x, long* y, long* Width, long* Height)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0xef, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, x, y, Width, Height);
	return result;
}

void CSpreadSheet::GetClientArea(long* Width, long* Height)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xf0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Width, Height);
}

long CSpreadSheet::GetColItemData(long Col)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf1, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Col);
	return result;
}

CString CSpreadSheet::QueryCustomName(LPCTSTR Name)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf2, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Name);
	return result;
}

CString CSpreadSheet::GetCustomName(LPCTSTR Name)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf3, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Name);
	return result;
}

BOOL CSpreadSheet::GetDataFillData(VARIANT* Var, short VarType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I2;
	InvokeHelper(0xf4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Var, VarType);
	return result;
}

void CSpreadSheet::GetFirstValidCell(long* Col, long* Row)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xf5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Col, Row);
}

long CSpreadSheet::GetItemData()
{
	long result;
	InvokeHelper(0xf6, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CSpreadSheet::GetIteration(short* MaxIterations, double* MaxChange)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI2 VTS_PR8;
	InvokeHelper(0xf7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		MaxIterations, MaxChange);
	return result;
}

void CSpreadSheet::GetLastValidCell(long* Col, long* Row)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xf8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Col, Row);
}

long CSpreadSheet::GetMultiSelItem(long SelPrev)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		SelPrev);
	return result;
}

short CSpreadSheet::GetRefStyle()
{
	short result;
	InvokeHelper(0xfa, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CSpreadSheet::GetRowItemData(long Row)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Row);
	return result;
}

BOOL CSpreadSheet::GetText(long Col, long Row, VARIANT* Var)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0xfc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Var);
	return result;
}

BOOL CSpreadSheet::IsCellSelected(long Col, long Row)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xfd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row);
	return result;
}

BOOL CSpreadSheet::IsFormulaValid(LPCTSTR Formula)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xfe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Formula);
	return result;
}

BOOL CSpreadSheet::IsVisible(long Col, long Row, BOOL Partial)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xff, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Partial);
	return result;
}

BOOL CSpreadSheet::LoadFromFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x100, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CSpreadSheet::LoadTabFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x101, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

void CSpreadSheet::RowHeightToTwips(long Row, float Height, long* Twips)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_PI4;
	InvokeHelper(0x102, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Row, Height, Twips);
}

BOOL CSpreadSheet::SaveTabFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x103, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CSpreadSheet::SaveToFile(LPCTSTR FileName, BOOL DataOnly)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x104, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, DataOnly);
	return result;
}

BOOL CSpreadSheet::SetCellDirtyFlag(long Col, long Row, BOOL Dirty)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x105, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Dirty);
	return result;
}

void CSpreadSheet::SetColItemData(long Col, long Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x106, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Col, Value);
}

BOOL CSpreadSheet::SetCustomName(LPCTSTR Name, LPCTSTR Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x107, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, Value);
	return result;
}

BOOL CSpreadSheet::SetDataFillData(const VARIANT& Var)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x108, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Var);
	return result;
}

void CSpreadSheet::SetItemData(long Value)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x109, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Value);
}

void CSpreadSheet::SetIteration(BOOL Iteration, short MaxIterations, double MaxChange)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I2 VTS_R8;
	InvokeHelper(0x10a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Iteration, MaxIterations, MaxChange);
}

void CSpreadSheet::SetRefStyle(short RefStyle)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x10b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 RefStyle);
}

void CSpreadSheet::SetRowItemData(long Row, long Value)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x10c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Row, Value);
}

void CSpreadSheet::SetText(long Col, long Row, const VARIANT& Var)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x10d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Col, Row, &Var);
}

void CSpreadSheet::TwipsToColWidth(long Twips, float* ColWidth)
{
	static BYTE parms[] =
		VTS_I4 VTS_PR4;
	InvokeHelper(0x10e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Twips, ColWidth);
}

void CSpreadSheet::TwipsToRowHeight(long Row, long Twips, float* RowHeight)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR4;
	InvokeHelper(0x10f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Row, Twips, RowHeight);
}

BOOL CSpreadSheet::GetActionKey(short Action, BOOL* fShift, BOOL* fCtrl, short* Key)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_PBOOL VTS_PBOOL VTS_PI2;
	InvokeHelper(0x124, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Action, fShift, fCtrl, Key);
	return result;
}

BOOL CSpreadSheet::SetActionKey(short Action, BOOL fShift, BOOL fCtrl, short Key)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_BOOL VTS_I2;
	InvokeHelper(0x125, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Action, fShift, fCtrl, Key);
	return result;
}

BOOL CSpreadSheet::GetOddEvenRowColor(long* clrBackOdd, long* clrForeOdd, long* clrBackEven, long* clrForeEven)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x126, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		clrBackOdd, clrForeOdd, clrBackEven, clrForeEven);
	return result;
}

BOOL CSpreadSheet::SetOddEvenRowColor(long clrBackOdd, long clrForeOdd, long clrBackEven, long clrForeEven)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x127, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		clrBackOdd, clrForeOdd, clrBackEven, clrForeEven);
	return result;
}

BOOL CSpreadSheet::GetFloat(long Col, long Row, double* Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR8;
	InvokeHelper(0x128, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Value);
	return result;
}

BOOL CSpreadSheet::SetFloat(long Col, long Row, double Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8;
	InvokeHelper(0x129, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Value);
	return result;
}

BOOL CSpreadSheet::GetInteger(long Col, long Row, long* Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4;
	InvokeHelper(0x12a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Value);
	return result;
}

BOOL CSpreadSheet::SetInteger(long Col, long Row, long Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x12b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Value);
	return result;
}

void CSpreadSheet::SetCalText(LPCTSTR ShortDays, LPCTSTR LongDays, LPCTSTR ShortMonths, LPCTSTR LongMonths, LPCTSTR OkText, LPCTSTR CancelText)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x12c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ShortDays, LongDays, ShortMonths, LongMonths, OkText, CancelText);
}

BOOL CSpreadSheet::GetTextTipAppearance(BSTR* FontName, short* FontSize, BOOL* FontBold, BOOL* FontItalic, long* BackColor, long* ForeColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_PI2 VTS_PBOOL VTS_PBOOL VTS_PI4 VTS_PI4;
	InvokeHelper(0x12d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FontName, FontSize, FontBold, FontItalic, BackColor, ForeColor);
	return result;
}

BOOL CSpreadSheet::SetTextTipAppearance(LPCTSTR FontName, short FontSize, BOOL FontBold, BOOL FontItalic, long BackColor, long ForeColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BOOL VTS_BOOL VTS_I4 VTS_I4;
	InvokeHelper(0x12e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FontName, FontSize, FontBold, FontItalic, BackColor, ForeColor);
	return result;
}

BOOL CSpreadSheet::ExportToHTML(LPCTSTR FileName, BOOL AppendFlag, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BSTR;
	InvokeHelper(0x12f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, AppendFlag, LogFile);
	return result;
}

BOOL CSpreadSheet::ExportRangeToHTML(long Col, long Row, long Col2, long Row2, LPCTSTR FileName, BOOL AppendFlag, LPCTSTR LogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BOOL VTS_BSTR;
	InvokeHelper(0x130, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row, Col2, Row2, FileName, AppendFlag, LogFile);
	return result;
}

BOOL CSpreadSheet::GetArray(long ColLeft, long RowTop, const VARIANT& VarArray)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x131, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ColLeft, RowTop, &VarArray);
	return result;
}

BOOL CSpreadSheet::SetArray(long ColLeft, long RowTop, const VARIANT& VarArray)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x132, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ColLeft, RowTop, &VarArray);
	return result;
}

BOOL CSpreadSheet::IsExcelFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x133, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CSpreadSheet::GetExcelSheetList(LPCTSTR FileName, const VARIANT& VarArray, short* ListCount, LPCTSTR LogFileName, short* WorkbookHandle, BOOL Replace)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_PI2 VTS_BSTR VTS_PI2 VTS_BOOL;
	InvokeHelper(0x134, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, &VarArray, ListCount, LogFileName, WorkbookHandle, Replace);
	return result;
}

BOOL CSpreadSheet::ImportExcelSheet(short WorkbookHandle, const VARIANT& Sheet)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x135, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		WorkbookHandle, &Sheet);
	return result;
}

BOOL CSpreadSheet::ExportToExcel(LPCTSTR FileName, LPCTSTR SheetName, LPCTSTR LogFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x136, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, SheetName, LogFileName);
	return result;
}

BOOL CSpreadSheet::EnumCustomFunction(LPCTSTR PrevFuncName, BSTR* FuncName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PBSTR;
	InvokeHelper(0x137, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PrevFuncName, FuncName);
	return result;
}

BOOL CSpreadSheet::GetCustomFunction(LPCTSTR FuncName, short* MinArgs, short* MaxArgs, long* Flags)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PI2 VTS_PI2 VTS_PI4;
	InvokeHelper(0x138, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FuncName, MinArgs, MaxArgs, Flags);
	return result;
}

BOOL CSpreadSheet::RemoveCustomFunction(LPCTSTR FuncName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x139, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FuncName);
	return result;
}

BOOL CSpreadSheet::ReCalcCell(long Col, long Row)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x13a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Col, Row);
	return result;
}

void CSpreadSheet::OLEDrag()
{
	InvokeHelper(0x13c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CSpreadSheet::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CSpreadSheet::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
