// AutoSpriteDlg.cpp : implementation file
//

#include "stdafx.h"
#include "igt3.h"
#include "AutoSprDlg.h"

#include "ToolEngine1.h"
#include "FolderSelectorDlg.h"
#include "MyDib.h"
#include "AniObjEx2.h"
#include "SetCenterDlg.h"

/////////////////////////////////////////////////////////////////////////////
// CAutoSprDlg property page
extern CToolEngine1* g_pTEng;

CAutoSprDlg::CAutoSprDlg() : CDialog(CAutoSprDlg::IDD)
{
	//{{AFX_DATA_INIT(CAutoSprDlg)
		// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
	m_bStopProcess = FALSE;
}

CAutoSprDlg::~CAutoSprDlg()
{
}

void CAutoSprDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAutoSprDlg)
	DDX_Control(pDX, IDC_C_REINFORCE, m_CReinforce);
	DDX_Control(pDX, IDC_PROGRESS, m_Progress);
	DDX_Control(pDX, IDC_FILE_NAME, m_FileName);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CAutoSprDlg, CDialog)
	//{{AFX_MSG_MAP(CAutoSprDlg)
	ON_BN_CLICKED(IDC_BROWSE_WORK_FOLDER_AND_START_WORKING, OnBrowseWorkFolderAndStartWorking)
	ON_BN_CLICKED(IDC_CLOSEDLG, OnClosedlg)
	ON_BN_CLICKED(IDC_CANCEL_PROCESS, OnCancelProcess)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CAutoSprDlg message handlers

void CAutoSprDlg::OnBrowseWorkFolderAndStartWorking() 
{
	// TODO: Add your control notification handler code here
	CFolderSelectorDlg dlg;
	if(dlg.DoModal() == IDCANCEL) return;

	CString Path = dlg.GetFolderName();

	m_bStopProcess = FALSE; // 일단 중단 플래그 거짓으로,. 버튼 누르면 바뀐다..
	SetCurrentDirectory(Path);

	int check = GetCheckedRadioButton(IDC_R_SPR_EX_BY_FILE_NAME, IDC_R_SPR_INDEXED);

	CSetCenterDlg SetCenterDlg; // 센터점 잡기
	if(SetCenterDlg.DoModal() == IDCANCEL) return;
	CPoint ptCenter = SetCenterDlg.GetCenter(); // 센터점..

	switch(check)
	{
	case IDC_R_SPR_EX_BY_FILE_NAME:
		{
			ProcessLSPSprExByFileName(Path, ptCenter);
		}
		break;
	case IDC_R_SPR_EX_BY_FOLDER:
		{
			ProcessLSPSprExByFolder(Path, ptCenter);
		}
		break;
	case IDC_R_SPR:
	case IDC_R_SPR_INDEXED:
		{
			SetCurrentDirectory(Path);
			CFileFind filefind;
			BOOL bFind = filefind.FindFile("*.*");
			int nSubFolder = 0;
			CString SubFolders[256];
			while(bFind)
			{
				bFind = filefind.FindNextFile();
				CString FileName = filefind.GetFilePath();
				if(filefind.IsDirectory())
				{
					if(FileName.Find("\\.") == -1)
					{
						SubFolders[nSubFolder] = FileName;
						nSubFolder++;
					}
				}
			}
			
			if(nSubFolder <= 0)
			{
				SubFolders[0] = Path;
				nSubFolder = 1;
			}
			
			for(int i = 0; i < nSubFolder; i++)
			{
				CString SrcFN = ProcessLSPSprSimple(SubFolders[i], ptCenter);
				if(check == IDC_R_SPR_INDEXED) // 8 비트 파일을 만들 경우..
				{
					DWORD dwFlags = OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT;
					CFileDialog dlg(TRUE, "bmp", NULL, dwFlags, "8 비트 비트맵 파일(*.bmp)|*.bmp||", NULL);
					char szBuff[128]; lstrcpy(szBuff, SubFolders[i]); lstrcat(szBuff, "에 대한 8비트 인덱스 비트맵 파일 지정");
					dlg.m_ofn.lpstrTitle = szBuff;
					dlg.m_ofn.lpstrInitialDir = Path;

					if(dlg.DoModal() == IDCANCEL ) break;

					CString IndexFN = dlg.GetPathName();
					CString DestFN = SrcFN;
					int n = DestFN.GetLength();
					DestFN.SetAt(n-3, 's');
					DestFN.SetAt(n-2, 'p');
					DestFN.SetAt(n-1, '8');
					// 단순 LSP 파일을 8비트 인덱스 파일로 바꾼다..
					BOOL bSuccess = g_pTEng->ConvertSImpleLSPFileToIndexedLSPFile(SrcFN, DestFN, IndexFN);
					if(!bSuccess) break;
					CString tbuff;
					tbuff = SrcFN + " -> " + DestFN + " 로 저장 되었습니다.\n 원본 " + SrcFN + "을 지울까요?";
					int yesno = MessageBox(tbuff, "저장 확인", MB_YESNO);
					if(yesno == IDYES) remove(SrcFN); // 원본은 지운다..
				}
				if(m_bStopProcess == TRUE) break;

				// 마지막 스프라이트에서 기본적인 에니메이션을 추출..
				if(i == nSubFolder-1)
				{
//					CAniObjEx2 AniObjEx2;
//					AniObjEx2.Load(SrcFN
				}
			}
		}
		break;
	default:
		MessageBox("작업 종류 지정이 안되어 있습니다.");
		break;
	}
}

BOOL CAutoSprDlg::TransactLSPSprEx(CString& FileTitle, CAutoSprDlg::_AUTO_SPR_LSP_EX* pData)
{
	if(FileTitle.GetLength() <= 0) return FALSE;
	if(pData == NULL) return FALSE;

	CString FileName;
	CString FN_V1_N;
	CString FN_V1_A;
	CString FN_V2_N;
	CString FN_V2_A;
	CString FN_SH_N;
	CString FN_FX_A;
	CString FN_P_N[MAX_PART];
	CString FN_P_A[MAX_PART];
	
	FN_V1_A.Format("%s_%.2d_V1_A_%.1d_%.4d.BMP", FileTitle, pData->nAni, pData->nDir, pData->nFrame);
	FN_V1_N.Format("%s_%.2d_V1_N_%.1d_%.4d.BMP", FileTitle, pData->nAni, pData->nDir, pData->nFrame);
	FN_V2_A.Format("%s_%.2d_V2_A_%.1d_%.4d.BMP", FileTitle, pData->nAni, pData->nDir, pData->nFrame);
	FN_V2_N.Format("%s_%.2d_V2_N_%.1d_%.4d.BMP", FileTitle, pData->nAni, pData->nDir, pData->nFrame);
	FN_SH_N.Format("%s_%.2d_SH_N_%.1d_%.4d.BMP", FileTitle, pData->nAni, pData->nDir, pData->nFrame);
	FN_FX_A.Format("%s_%.2d_FX_A_%.1d_%.4d.BMP", FileTitle, pData->nAni, pData->nDir, pData->nFrame);
	for(int i = 0; i < MAX_PART; i++)
	{
		FN_P_A[i].Format("%s_%.2d_P%.1d_A_%.1d_%.4d.BMP", FileTitle, pData->nAni, i, pData->nDir, pData->nFrame);
		FN_P_N[i].Format("%s_%.2d_P%.1d_N_%.1d_%.4d.BMP", FileTitle, pData->nAni, i, pData->nDir, pData->nFrame);
	}

	BOOL bSuccess = FALSE;

	
	////////////////////////////////////////////////////////////////////////////
	// 캐릭터 영역 - 1 모든 스프라이트의 기준이된다. 고로 반드시 있어야 한다.
	bSuccess = TransactPieceLSPSpr(FN_V1_A, FN_V1_N, &pData->rcV1, &pData->nV1, &pData->pV1);
	if(bSuccess == FALSE) return FALSE; // 반드시 있어야 하는 비트맵
	////////////////////////////////////////////////////////////////////////////
	// 캐릭터 영역 - 2 있어도 그만 없어도 그만..
	bSuccess = TransactPieceLSPSpr(FN_V2_A, FN_V2_N, &pData->rcV2, &pData->nV2, &pData->pV2);
	////////////////////////////////////////////////////////////////////////////
	// 그림자 영역 - 있어도 그만 없어도 그만..
	CString str;
	bSuccess = TransactPieceLSPSpr(str, FN_SH_N, &pData->rcSH, &pData->nSH, &pData->pSH);
	////////////////////////////////////////////////////////////////////////////
	// 공격 효과 영역 - 있어도 그만 없어도 그만..
	bSuccess = TransactPieceLSPSpr(FN_FX_A, "", &pData->rcFX, &pData->nFX, &pData->pFX);
	////////////////////////////////////////////////////////////////////////////
	// 캐릭터 파트 영역 0 ~ 10 -  있어도 그만 없어도 그만..
	for(i = 0; i < MAX_PART; i++)
	{
		bSuccess = TransactPieceLSPSpr(FN_P_A[i], FN_P_N[i], &pData->rcPs[i], &pData->nPs[i], &pData->pPs[i]);
	} // end of for i
	return TRUE; // 정상 처리후 종료
}

void CAutoSprDlg::OnClosedlg() 
{
	CDialog::OnCancel();
}

void CAutoSprDlg::OnCancelProcess() 
{
	m_bStopProcess = TRUE;
}

BOOL CAutoSprDlg::OnInitDialog() 
{
	CDialog::OnInitDialog();
	
	CheckRadioButton(IDC_R_SOMA_EX, IDC_R_EVERLAND, IDC_R_SOMA_EX); // 라디오 버튼 체크

	SetDlgItemInt(IDC_REMOVE_PIXEL_DELTA_R, 0);
	SetDlgItemInt(IDC_REMOVE_PIXEL_DELTA_G, 0);
	SetDlgItemInt(IDC_REMOVE_PIXEL_DELTA_B, 0);
	
	return TRUE;  // return TRUE unless you set the focus to a control
	              // EXCEPTION: OCX Property Pages should return FALSE
}

void CAutoSprDlg::ProcessLSPSprExByFileName(CString& Path, CPoint ptCenter)
{
	SetCurrentDirectory(Path);
	
	CString FileName; // 폴더에 있는 파일을 다 찾는다.
	CStringArray FileNames;
	CFileFind finder;
	BOOL bWorking = finder.FindFile("*.bmp");
	while (bWorking)
	{
		bWorking = finder.FindNextFile();
		FileName = finder.GetFileName();
		if(FileName.Find("_.0") != -1)
		{
			CString tmpFN = FileName;
			FileName.Replace("_.0", "_0");
			rename(tmpFN, FileName);
		}
		FileNames.Add(FileName);
	}
	
	// 에니메이션 오브젝트 분석
	CAniObjEx2* pAniObj = new CAniObjEx2();

	int nWholeAni = 14;
	pAniObj->AniAlloc(nWholeAni); // 총 14 개 동작이다..

	CFile file; // goto 문 땜시 부득이 하게 옮김..
	CFileDialog* pDlg = NULL; 

	int nFileCount = FileNames.GetSize(); // 총 파일 갯수..
	int nWholeFrame = 0, nAni = 0, nDir = 0, nFrame = 0, nLength = 0; // 전체 프레임수
	int nMaxFrms[MAX_ANI][8]; // 에니메이션 방향별 프레임수..
	CLEAR(nMaxFrms);

	CLEAR(nMaxFrms);

	for(int t = 0; t < nFileCount; t++)
	{
		FileName = FileNames.GetAt(t); // 파일 이름 가져오기.
		FileName.MakeLower(); // 소문자로 바꾸고..
		nLength = FileName.GetLength(); // 파일 이름 길이
		
		nAni	= atoi(FileName.Mid(nLength - 18, 2)); // Animation 번호
		nDir	= atoi(FileName.Mid(nLength - 10, 1)); // 방향
		nFrame	= atoi(FileName.Mid(nLength - 8, 4));// 프레임... 나중에 정렬..
		
		// 파일 이름에 V1_A 가 있으면 프레임 카운트 증가
//		FileName = FileName.Mid(nLength - 16, 6);
		if(FileName.Find("_v1_a_") != -1)
		{
			nWholeFrame++; // 스프라이트 총 프레임수 증가...
			_ANI_DATA ani;
			CLEAR(ani);
			pAniObj->GetAniData(nAni, &ani); // 에니메이션 처리...
			ani.nFrms[nDir][nMaxFrms[nAni][nDir]] = nFrame;
			nMaxFrms[nAni][nDir]++;
			pAniObj->SetAniData(nAni, &ani); // 에니메이션 처리...
		}
	}

	// 제일 많은 프레임을 에니메이션의 프레임으로 처리..
	int mfs[MAX_ANI]; CLEAR(mfs);
	for(nAni = 0; nAni < MAX_ANI; nAni++)
	{
		for(nDir = 0; nDir < 8; nDir++)
		{
			if(mfs[nAni] < nMaxFrms[nAni][nDir]) mfs[nAni] = nMaxFrms[nAni][nDir];
		}
		_ANI_DATA ani;
		CLEAR(ani);
		pAniObj->GetAniData(nAni, &ani);
		ani.nMaxFrm = mfs[nAni];
		pAniObj->SetAniData(nAni, &ani);
	}

	if(nWholeFrame <= 0) return; // 처리할 프레임이 하나도 없다면 돌아간다.

	// 파일 이름을 분석해 처리..
	FileName = FileNames.GetAt(0);
	CString FileTitle = FileName.Left(FileName.GetLength() - 19); // 파일 타이틀 구하기.. _00_V1_A_0_0000.bmp 빼고 구한다.
	
	m_Progress.SetRange(0, nWholeFrame); // 진행 상황 프로그레스 준비..
	m_bStopProcess = FALSE; // 스톱 플래그 초기화

	// 스프라이트 데이터 준비..
	_SPR_LSP_EX* pSprs = new _SPR_LSP_EX[nWholeFrame]; memset(pSprs, 0, sizeof(_SPR_LSP_EX)*nWholeFrame);
	_AUTO_SPR_LSP_EX* pAutoSprs = new _AUTO_SPR_LSP_EX[nWholeFrame]; memset(pAutoSprs, 0, sizeof(_AUTO_SPR_LSP_EX)*nWholeFrame);
	
	// 순서대로 처리..
	int i, j, k, l, nSprFrm = 0; // 스프라이트 프레임 번호
	BOOL bSuccess = FALSE;
	for(i = 0; i < nWholeAni; i++) // 에니메이션별
	{
		_ANI_DATA ani;
		CLEAR(ani);
		pAniObj->GetAniData(i, &ani);
		if(ani.nMaxFrm <= 0) continue;
		for(j = 0; j < 8; j++) // 방향별
		{
			// 프레임 정렬
			qsort(ani.nFrms[j], ani.nMaxFrm, 4, CompareIntegerProc);
			for(k = 0; k < ani.nMaxFrm; k++)
			{
				if(m_bStopProcess == TRUE) goto ERROR_PROCESS;// 변환에 실패 하거나 Esc 누르면 변환 중단..
				if(nSprFrm >= nWholeFrame) continue; // 프레임이 빠져있으면 스킵...

				m_Progress.SetPos(nSprFrm+1); // 진행 상황
				CString str;
				str.Format("%s - 에니메이션 : %d | 방향 : %d | 프레임 : %d", FileTitle, i, j, k);
				m_FileName.SetWindowText(str);
				
				pAutoSprs[nSprFrm].nAni = i; pAutoSprs[nSprFrm].nDir = j; pAutoSprs[nSprFrm].nFrame = ani.nFrms[j][k];
				bSuccess = TransactLSPSprEx(FileTitle, &pAutoSprs[nSprFrm]); // 파일 타이틀에 따라 스프라이트 및 LSP 자동 처리..
				if(bSuccess == FALSE) 
				{
					CString err;
					err.Format("%s - 에니메이션:%d - 방향:%d - 프레임:%d 처리중 에러 발생.", FileTitle, i, j, k);
					int yesno = MessageBox(err + "무시하고 계속 하시겠습니까?", "Error", MB_YESNO);
					if(yesno == IDNO) goto ERROR_PROCESS;
					else if(yesno == IDYES) continue;
				}

				// 스프라이트 좌표 변환...
				if(pAutoSprs[nSprFrm].rcV1.left != 0)	pSprs[nSprFrm].rcV1 = pAutoSprs[nSprFrm].rcV1 - ptCenter;
				if(pAutoSprs[nSprFrm].rcV2.left != 0)	pSprs[nSprFrm].rcV2 = pAutoSprs[nSprFrm].rcV2 - ptCenter;
				if(pAutoSprs[nSprFrm].rcSH.left != 0)	pSprs[nSprFrm].rcSH = pAutoSprs[nSprFrm].rcSH - ptCenter;
				if(pAutoSprs[nSprFrm].rcFX.left != 0)	pSprs[nSprFrm].rcFX = pAutoSprs[nSprFrm].rcFX - ptCenter;
				for(l = 0; l < MAX_PART; l++)
				{
					if(pAutoSprs[nSprFrm].rcPs[l].left != 0) pSprs[nSprFrm].rcPs[l] = pAutoSprs[nSprFrm].rcPs[l] - ptCenter;
				}
				ani.nFrms[j][k] = nSprFrm;

				// 시스템을 계속 유지한다...  // 강제로 새로 업데이트
				MSG msg; PeekMessage(&msg, NULL, 0, 0, PM_REMOVE); TranslateMessage(&msg); DispatchMessage(&msg); this->UpdateWindow();

				POINT ptOffset = { pSprs[nSprFrm].rcV1.left, pSprs[nSprFrm].rcV1.top};
				UpdatePreview(ptOffset, pAutoSprs[nSprFrm].pV1);

				// 처리할 프레임 증가..
				nSprFrm++;
			}
		}
		pAniObj->SetAniData(i, &ani);
	} // end of for i

	///////////////////////////////////////////////////////////////////////////////////////////
	// 에니메이션 파일 저장..
	if(pDlg) { delete pDlg;  pDlg = NULL; }
	pDlg = new CFileDialog(FALSE, "ani", FileTitle+".ani", OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, "에니메이션(*.ani)|*.ani||", NULL);
	pDlg->m_ofn.lpstrInitialDir = g_pTEng->GetCurPath("ANI");

	if(pDlg->DoModal() != IDCANCEL)
	{
		FileName = pDlg->GetFileName();
		CString* pAniNames = new CString[nWholeAni];
		float* pfSpeeds = new float[nWholeAni];
		pfSpeeds[0] = 7.0f;		pAniNames[0] = "기본동작 - 보통";
		pfSpeeds[1] = 7.0f;		pAniNames[1] = "기본동작 - 전투시";
		pfSpeeds[2] = 10.0f;	pAniNames[2] = "이동 - 보통";
		pfSpeeds[3] = 12.0f;	pAniNames[3] = "이동 - 전투시";
		pfSpeeds[4] = 12.0f;	pAniNames[4] = "이동 - 뛰기";
		pfSpeeds[5] = 17.0f;	pAniNames[5] = "공격 - 보통1";
		pfSpeeds[6] = 17.0f;	pAniNames[6] = "공격 - 보통2";
		pfSpeeds[7] = 17.0f;	pAniNames[7] = "공격 - 마법";
		pfSpeeds[8] = 13.0f;	pAniNames[8] = "밀어내기(발경술)";
		pfSpeeds[9] = 20.0f;	pAniNames[9] = "대쉬";
		pfSpeeds[10] = 15.0f;	pAniNames[10] = "방어";
		pfSpeeds[11] = 12.0f;	pAniNames[11] = "나가 떨어지기(KO)";
		pfSpeeds[12] = 15.0f;	pAniNames[12] = "죽기";
		pfSpeeds[13] = 12.0f;	pAniNames[13] = "얻어맞기";
		
		for(int tmp = 0; tmp < nWholeAni; tmp++)
		{
			_ANI_DATA ani;
			pAniObj->GetAniData(tmp, &ani);
			lstrcpy(ani.szName, pAniNames[tmp]);
			ani.fSpd = pfSpeeds[tmp];
			pAniObj->SetAniData(tmp, &ani);
		}

		delete [] pAniNames; pAniNames = NULL;
		delete [] pfSpeeds; pfSpeeds = NULL;

		pAniObj->Save(FileName, SAVE_ANI);
	}
	delete pDlg; pDlg = NULL;
	// 에니메이션 파일 저장..
	///////////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////////////////
	// 스프라이트 파일 저장 ..
	if(pDlg) { delete pDlg; pDlg = NULL; }
	pDlg = new CFileDialog(FALSE, "spx", FileTitle+".spx", OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, "확장 LSP Sprite(*.spx)|*.spx||", NULL);
	pDlg->m_ofn.lpstrInitialDir = g_pTEng->GetCurPath("SPR");
	if(pDlg->DoModal() == IDCANCEL)
	{
		delete pDlg; pDlg = NULL;
		goto NO_ERROR_PROCESS;
	}
	FileName = pDlg->GetFileName();
	delete pDlg; pDlg = NULL;

	file.Open(FileName, CFile::modeCreate | CFile::modeWrite);
	_SPR_HEADER HSpr;
	CLEAR(HSpr);
	HSpr.nQt = nWholeFrame;
	wsprintf(HSpr.szID, "확장 LSP Sprite : %s | Sprite - %d", FileTitle, HSpr.nQt);
	file.Write(&HSpr, sizeof(_SPR_HEADER));
	
	// 스프라이트 영역 - 툴에서만 쓰이는 부가적인 데이터. - Skip....
	file.Seek(sizeof(_SPR_TOOL_EX)*HSpr.nQt, CFile::current);
		
	// 스프라이트 영역 - 실제 게임에서만 쓰이는 데이터.
	file.Write(pSprs, sizeof(_SPR_LSP_EX)*HSpr.nQt);

	/////////////////////////
	// 압축 스프라이트 데이터
	for(i = 0; i < HSpr.nQt; i++)
	{
		// 캐릭터 보이는 영역 - Part 1
		if(pAutoSprs[i].nV1 > 0) { file.Write(&pAutoSprs[i].nV1, 4); file.Write(pAutoSprs[i].pV1, pAutoSprs[i].nV1); }
		else file.Write(&pAutoSprs[i].nV1, 4);// 영역이 없으면 0 만 써놓는다.

		// 캐릭터 보이는 영역 - Part 2
		if(pAutoSprs[i].nV2 > 0) { file.Write(&pAutoSprs[i].nV2, 4); file.Write(pAutoSprs[i].pV2, pAutoSprs[i].nV2); }
		else file.Write(&pAutoSprs[i].nV2, 4);// 영역이 없으면 0 만 써놓는다.

		// 그림자 영역
		if(pAutoSprs[i].nSH > 0) { file.Write(&pAutoSprs[i].nSH, 4); file.Write(pAutoSprs[i].pSH, pAutoSprs[i].nSH); }
		else file.Write(&pAutoSprs[i].nSH, 4);// 영역이 없으면 0 만 써놓는다.

		// 공격 효과 영역
		if(pAutoSprs[i].nFX > 0) { file.Write(&pAutoSprs[i].nFX, 4); file.Write(pAutoSprs[i].pFX, pAutoSprs[i].nFX); }
		else file.Write(&pAutoSprs[i].nFX, 4); // 영역이 없으면 0 만 써놓는다.

		for(j = 0; j < MAX_PART; j++) // 무기, 아이템등 파트 영역
		{
			if(pAutoSprs[i].nPs[j] > 0) {	file.Write(&pAutoSprs[i].nPs[j], 4); file.Write(pAutoSprs[i].pPs[j], pAutoSprs[i].nPs[j]); }
			else file.Write(&pAutoSprs[i].nPs[j], 4); // 영역이 없으면 0 만 써놓는다.
		}
	} // end of for i
	file.Close();
	// 스프라이트 파일 저장 ..
	///////////////////////////////////////////////////////////////////////////////////////////
	goto NO_ERROR_PROCESS;

ERROR_PROCESS:

NO_ERROR_PROCESS:
	for(i = 0; i < nWholeFrame; i++)
	{
		if(pAutoSprs[i].pV1) { delete [] pAutoSprs[i].pV1; pAutoSprs[i].pV1 = NULL; }
		if(pAutoSprs[i].pV2) { delete [] pAutoSprs[i].pV2; pAutoSprs[i].pV2 = NULL; }
		if(pAutoSprs[i].pSH) { delete [] pAutoSprs[i].pSH; pAutoSprs[i].pSH = NULL; }
		if(pAutoSprs[i].pFX) { delete [] pAutoSprs[i].pFX; pAutoSprs[i].pFX = NULL; }
		for(j = 0; j < MAX_PART; j++)
		{
			if(pAutoSprs[j].pPs[j]) { delete [] pAutoSprs[i].pPs[j]; pAutoSprs[i].pPs[j] = NULL; }
		}
	}
	if(pSprs) { delete [] pSprs; pSprs = NULL; }
	if(pAutoSprs) { delete [] pAutoSprs; pAutoSprs = NULL; }
	if(pAniObj) { delete pAniObj; pAniObj = NULL; }
	return;
}

CString CAutoSprDlg::ProcessLSPSprSimple(CString& Path, CPoint ptCenter)
{
	SetCurrentDirectory(Path);
	
	CString FileName; // 폴더에 있는 파일을 다 찾는다.
	CStringArray FileNames;
	CFileFind finder;

	// 폴더 이름 분리시 필요..
	char szFolder[256];
	CString fn = Path;
	int nFS = 0;

	BOOL bWorking = finder.FindFile("*.bmp");
	while (bWorking)
	{
		bWorking = finder.FindNextFile();
		FileName = finder.GetFileName();
		if(finder.IsDirectory() == FALSE) // 폴더는 빼고 딴다..
		{
			FileNames.Add(FileName);
		}
	}

	CFile file; // goto 문 땜시 부득이 하게 옮김..
	CFileDialog* pDlg = NULL;

	int nFileCount = FileNames.GetSize(); // 총 파일 갯수..
	int nWholeFrame = 0, nDir = 0, nFrame = 0, nLength = 0; // 전체 프레임수
	int nFrmCounts[8]; CLEAR(nFrmCounts);

	if(nFileCount <= 0) return ""; // 처리할 프레임이 하나도 없다면 돌아간다.

	// 파일 이름에 _A_ 가 들어 있으면 안티 처리 그렇지 않으면 ....
	// 파일 이름에 _SH_ 가 들어 있으면 그림자..
	BOOL bShadowTransact = FALSE;
	BOOL bAntiTransact = 0;

	for(int t = 0; t < nFileCount; t++)
	{
		FileName = FileNames.GetAt(t); // 파일 이름 가져오기.

		if(FileName.Find("_SH_") != -1 || FileName.Find("_sh_") != -1)
		{
			bShadowTransact = TRUE;
			break;
		}

		if(FileName.Find("_A_") != -1 || FileName.Find("_a_") != -1)
		{
			bAntiTransact |= 1;
		}
		if(FileName.Find("_N_") != -1 || FileName.Find("_n_") != -1)
		{
			bAntiTransact |= 2;
		}
	}

   	char szFNs[1024][256]; CLEAR(szFNs);
	CString FileTitle;
	int nFrmCount = 0;
	if(bAntiTransact == 3) bAntiTransact = TRUE;// 안티 처리이면...
	else bAntiTransact = FALSE;
	if(bAntiTransact) // 안티 처리이면...
	{
		for(int t = 0; t < nFileCount; t++)
		{
			FileName = FileNames.GetAt(t);
			if(FileName.Find("_A_") != -1 || FileName.Find("_a_") != -1)
			{
				lstrcpy(szFNs[nFrmCount], FileName);
				nFrmCount++;
			}
		}
		nWholeFrame = nFileCount/2;
		FileTitle = FileName.Mid(0, FileName.GetLength() - 13);
	}
	else
	{
		for(int t = 0; t < nFileCount; t++)
			lstrcpy(szFNs[t], FileNames.GetAt(t));
		nWholeFrame = nFileCount;
		FileTitle = FileName.Mid(0, FileName.GetLength() - 8);
	}

	// 방향과 프레임 번호로 정렬 	// "NASTASHA_0_01_00_00_V1_A_4_0000.bmp"
	qsort(szFNs, nWholeFrame, 256, CompareDirAndFrmsProc);

	// 스프라이트 데이터 준비..
	_SPR_LSP Sprs[MAX_SPR]; CLEAR(Sprs);
	int nVs[MAX_SPR]; CLEAR(nVs);
	WORD* pwVs[MAX_SPR]; CLEAR(pwVs);

	BOOL bSuccess = FALSE;
	m_Progress.SetRange(0, nWholeFrame);
	for(int i = 0; i < nWholeFrame; i++)
	{
		CString AFN = "", NFN = "";
		AFN = szFNs[i];
		if(bAntiTransact)
		{
			NFN = AFN;
			NFN.Replace("_A_", "_N_");
			NFN.Replace("_a_", "_N_");
		}
		if(bShadowTransact)
		{
			NFN = AFN;
			AFN = "";
		}
		
		m_Progress.SetPos(i+1); // 진행 상황
		CString str;
		str.Format("%s - 프레임 : %d", AFN, i);
		m_FileName.SetWindowText(str);
		
		CRect rcTemp;
		bSuccess = TransactPieceLSPSpr(AFN, NFN, &rcTemp, &nVs[i], &pwVs[i]); // 파일 타이틀에 따라 스프라이트 및 LSP 자동 처리..
		if(bSuccess == FALSE) goto ERROR_PROCESS;// 변환에 실패 하거나 Esc 누르면 변환 중단..
		if(m_bStopProcess == TRUE) goto STOP_PROCESS;

		// 스프라이트 좌표 변환...
		if(rcTemp.right - rcTemp.left > 0 && rcTemp.bottom - rcTemp.top > 0) Sprs[i].rcV = rcTemp - ptCenter;
		POINT ptOffset = { Sprs[i].rcV.left, Sprs[i].rcV.top};
		UpdatePreview(ptOffset, pwVs[i]); // 프리뷰 업데이트

		// 시스템을 계속 유지한다...  // 강제로 새로 업데이트
		MSG msg; PeekMessage(&msg, NULL, 0, 0, PM_REMOVE); TranslateMessage(&msg); DispatchMessage(&msg); this->UpdateWindow();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////
	// 스프라이트 파일 저장 ..
	if(pDlg) { delete pDlg; pDlg = NULL; }
	pDlg = new CFileDialog(FALSE, "spl", FileTitle+".spl", OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, "단순 LSP 스프라이트(*.spl)|*.spl||", NULL);
	pDlg->m_ofn.lpstrTitle = "스프라이트 파일 저장";
	pDlg->m_ofn.lpstrInitialDir = g_pTEng->GetCurPath("SPR");
	
	while(1) // 폴더 이름만 분리..
	{
		int nLS = nFS+1;
		nFS = Path.Find('\\', nLS);
		if(nFS == -1)
		{
			fn = Path.Mid(nLS, Path.GetLength() - nLS);
			break;
		}
	}
	
	// 초기 이름 정해주기..
	lstrcpy(szFolder, fn);
	lstrcat(szFolder, ".spl");
	pDlg->m_ofn.lpstrFile = szFolder;

	if(pDlg->DoModal() == IDCANCEL)
	{
		delete pDlg; pDlg = NULL;
		goto STOP_PROCESS;
	}
	
	FileName = pDlg->GetPathName();

	file.Open(FileName, CFile::modeCreate | CFile::modeWrite);
	_SPR_HEADER HSpr;
	CLEAR(HSpr);
	HSpr.nQt = nWholeFrame;
	wsprintf(HSpr.szID, "단순 LSP Sprite : %s | Sprite - %d", FileTitle, HSpr.nQt);
	file.Write(&HSpr, sizeof(_SPR_HEADER));
	
	// 스프라이트 영역 - 툴에서만 쓰이는 부가적인 데이터. - 0 으로 채운다..
	_SPR_TOOL_EX sprTemp; CLEAR(sprTemp);
	for(i = 0; i < HSpr.nQt; i++)
		file.Write(&sprTemp, sizeof(_SPR_TOOL_EX));
		
	// 스프라이트 영역 - 실제 게임에서만 쓰이는 데이터.
	for(i = 0; i < HSpr.nQt; i++)
		file.Write(&Sprs[i], sizeof(_SPR_LSP));

	/////////////////////////
	// 압축 스프라이트 데이터
	for(i = 0; i < HSpr.nQt; i++)
	{
		file.Write(&nVs[i], 4);
		if(nVs[i] > 0) file.Write(pwVs[i], nVs[i]);
	} // end of for i
	file.Close();
	// 스프라이트 파일 저장 ..
	///////////////////////////////////////////////////////////////////////////////////////////
	goto STOP_PROCESS;

ERROR_PROCESS:
	FileName.Format(" %d 프레임 처리중 에러 발생했어", i);
	MessageBox(FileTitle + FileName, "Error");
	FileName = "";

STOP_PROCESS:
	for(i = 0; i < MAX_FRM; i++)
	{
		if(pwVs[i])
		{
			delete [] pwVs[i];
			pwVs[i] = NULL;
		}
	}
	return FileName;
}

BOOL CAutoSprDlg::TransactPieceLSPSpr(CString& AntiFileName, CString NonAntiFileName, RECT *pRC, int* pnData, WORD** ppwData)
{
	if(pRC == NULL || pnData == NULL || ppwData == NULL) return FALSE;

	LPDIRECTDRAWSURFACE7 lpddsA = g_pTEng->LoadBMP(AntiFileName, FALSE, NULL);
	LPDIRECTDRAWSURFACE7 lpddsN = g_pTEng->LoadBMP(NonAntiFileName, FALSE, NULL);
	DDSURFACEDESC2 ddsd;
	if(!lpddsN && !lpddsA) return FALSE; // 둘다 없다면 실패..

	WORD* pDest = NULL;
	WORD* pSrc = NULL;
	int pitch = 0;
	CLEAR(ddsd);

	if(lpddsA && lpddsN) // 안티 없는 파일과 있는 파일 둘다 있다면..
	{
		CRect rcImage = g_pTEng->GetSurfaceSize(lpddsA);
		int width = rcImage.right - rcImage.left; // 너비 높이 
		int height = rcImage.bottom - rcImage.top;
		if(width <= 15 || height <= 15)
		{
			MessageBox("자동 처리는 그림 크기가 16*16 이상일 경우에만 가능합니다.");
			return FALSE;
		}

		// 투명색 검출....
		g_pTEng->LockSurface(lpddsA, &ddsd);
		WORD* pSrc = (WORD*)ddsd.lpSurface;
		int pitch = ddsd.lPitch / 2;
		WORD wTColor = g_pTEng->GetPixel(pSrc, pitch, 0, 0); // 화면의 0,0 의 색..
		COLORREF TColor = g_pTEng->RGB16(wTColor);
		g_pTEng->UnlockSurface(lpddsA);

		// 마스크 테이블 만들기..
		WORD* pMaskTbl = new WORD[width*height];
		memset(pMaskTbl, 0, width*height*2);
		g_pTEng->LockSurface(lpddsN, &ddsd);
		pSrc = (WORD*)ddsd.lpSurface;
		pitch = ddsd.lPitch / 2;
		WORD wPixel;
		for(int y = 0; y < height; y++)
		{
			for(int x = 0; x < width; x++)
			{
				wPixel = g_pTEng->GetPixel(pSrc, pitch, x, y);
				pMaskTbl[y*width+x] = wPixel;
			}
		}
		g_pTEng->UnlockSurface(lpddsN);

		// 마스크 처리 및 안티 없애기..
		g_pTEng->TransactMaskAndAnti(lpddsA, pMaskTbl, TColor);
		if(pMaskTbl) { delete [] pMaskTbl; pMaskTbl = NULL; }

		// 실제 영역 찾기 및 LSP 압축
		*pRC = g_pTEng->FindRegionManual(lpddsA, rcImage, TColor);
		BOOL bSuccess = g_pTEng->EncodeToLSP(lpddsA, TColor, *pRC, pnData, ppwData);
		if(lpddsA && bSuccess == FALSE) MessageBox(AntiFileName, "LSP 압축 실패");

		// 이제 서피스 날린다..
		RELEASE(lpddsA);
		RELEASE(lpddsN);
	}
	else if(!lpddsA && lpddsN) // 안티 없는 파일만 있다면..
	{
		CRect rcImage = g_pTEng->GetSurfaceSize(lpddsN);
		int width = rcImage.right - rcImage.left; // 너비 높이 
		int height = rcImage.bottom - rcImage.top;
		if(width <= 15 || height <= 15)
		{
			MessageBox("자동 처리는 그림 크기가 16*16 이상일 경우에만 가능합니다.");
			return FALSE;
		}

		// 투명색 검출....
		g_pTEng->LockSurface(lpddsN, &ddsd);
		WORD* pSrc = (WORD*)ddsd.lpSurface;
		int pitch = ddsd.lPitch / 2;
		WORD wTColor = g_pTEng->GetPixel(pSrc, pitch, 0, 0); // 화면의 0,0 의 색..
		COLORREF TColor = g_pTEng->RGB16(wTColor);
		g_pTEng->UnlockSurface(lpddsN);

		// 실제 영역 찾기 및 LSP 압축
		*pRC = g_pTEng->FindRegionManual(lpddsN, rcImage, TColor);
		BOOL bSuccess = g_pTEng->EncodeToLSP(lpddsN, TColor, *pRC, pnData, ppwData);
		if(lpddsN && bSuccess == FALSE) MessageBox(NonAntiFileName, "LSP 압축 실패");
		
		// 이제 서피스 날린다..
		RELEASE(lpddsN);
	}
	else if(lpddsA && !lpddsN) // 안티 있는 파일만 있다면..
	{
		CRect rcImage = g_pTEng->GetSurfaceSize(lpddsA);
		int width = rcImage.right - rcImage.left; // 너비 높이 
		int height = rcImage.bottom - rcImage.top;
		if(width <= 15 || height <= 15)
		{
			MessageBox("자동 처리는 그림 크기가 16*16 이상일 경우에만 가능합니다.");
			return FALSE;
		}

		// 투명색 검출....
		g_pTEng->LockSurface(lpddsA, &ddsd);
		WORD* pSrc = (WORD*)ddsd.lpSurface;
		int pitch = ddsd.lPitch / 2;
		WORD wTColor = g_pTEng->GetPixel(pSrc, pitch, 0, 0); // 화면의 0,0 의 색..
		COLORREF TColor = g_pTEng->RGB16(wTColor);
		g_pTEng->UnlockSurface(lpddsA);

		// 투명 컬러의 대화상자에 입력한 특정 범위 안에 있는 픽셀은 투명컬러로 채워준다.
		int nDelta = GetDlgItemInt(IDC_REMOVE_PIXEL_DELTA);
		g_pTEng->TransactSimilarTransColor(lpddsA, TColor, nDelta, m_CReinforce.GetCheck()); // 맨 마지막 인수는 ... 깎아낸다..?? 0 ~ 255, 맨뒤는 보정을 할건지 안할건지

		// 실제 영역 찾기 및 LSP 압축
		*pRC = g_pTEng->FindRegionManual(lpddsA, rcImage, TColor);
		BOOL bSuccess = g_pTEng->EncodeToLSP(lpddsA, TColor, *pRC, pnData, ppwData);
		if(lpddsA && bSuccess == FALSE) MessageBox(AntiFileName, "LSP 압축 실패");
		
		// 이제 서피스 날린다..
		RELEASE(lpddsA);
	}
	return TRUE; // 정상 처리후 종료
}

void CAutoSprDlg::UpdatePreview(POINT ptOffset, WORD *pLSPSpr)
{
	if(!pLSPSpr) return;

	CWnd* pWnd = GetDlgItem(IDC_STATIC_PREVIEW);
	CDC* pDC = pWnd->GetDC();
	CRect rc;
	pWnd->GetClientRect(&rc);
	
	pDC->FillSolidRect(&rc, RGB(96,96,96)); // 배경 지우기..

	WORD* pTemp = pLSPSpr;
	COLORREF Pixel;
	int nLine = *pTemp; pTemp++;
	int x, y;
	CPoint pt(rc.Width()/2 + ptOffset.x, rc.Height()/2 + ptOffset.y);

	for(y = pt.y; y < pt.y + nLine; y++)
	{
		int nNode = *pTemp; pTemp++;
		x = pt.x;
		for(int i = 0; i < nNode; i++)
		{
			x += *pTemp; pTemp++; // skip
			int nPixelCount = *pTemp; pTemp++;
			for(int j = 0; j < nPixelCount; j++, x++)
			{
				Pixel = g_pTEng->RGB16(*pTemp); pTemp++;
				pDC->SetPixel(x, y, Pixel);
			}
		}
	}
	pWnd->ReleaseDC(pDC);
}

void CAutoSprDlg::ClearPreview()
{
	CWnd* pWnd = GetDlgItem(IDC_STATIC_PREVIEW);
	CDC* pDC = pWnd->GetDC();
	CRect rc;
	pWnd->GetClientRect(&rc);
	pDC->FillSolidRect(&rc, RGB(96,96,96));
	pWnd->ReleaseDC(pDC);
}

void CAutoSprDlg::ProcessLSPSprExByFolder(CString& Path, CPoint ptCenter)
{
	CString parts[14];

	parts[0] = "V1"; 
	parts[1] = "V2";
	parts[2] = "FX";
	parts[3] = "SH";
	parts[4] = "P0";
	parts[5] = "P1";
	parts[6] = "P2";
	parts[7] = "P3";
	parts[8] = "P4";
	parts[9] = "P5";
	parts[10] = "P6";
	parts[11] = "P7";
	parts[12] = "P8";
	parts[13] = "P9";

	CString ADN, NDN, Info;
	char szAFNs[MAX_FRM][256]; CLEAR(szAFNs);
	char szNFNs[MAX_FRM][256]; CLEAR(szNFNs);
	CFile file;

	_ANI_DATA anis[MAX_ANI]; CLEAR(anis);
	_AUTO_SPR_LSP_EX AutoSprs[MAX_SPR]; CLEAR(AutoSprs);
	
	int nTmp = 0;
	RECT rcTmp = {0,0,0,0};
	WORD* pwTmp = 0;

	BOOL bSuccess;
	int nWholeFrame = 0;
	int nWholeAni = 0;

	SetCurrentDirectory(Path);
	CFileFind find; // 폴더가 몇개인지 찾는다..
	find.FindFile();
	BOOL bFind = TRUE;
	while(bFind)
	{
		bFind = find.FindNextFile();
		if(find.IsDirectory() == TRUE)
		{
			CString szd = find.GetFileName();
			int maxani = atoi(szd) + 1;
			if(maxani > nWholeAni) nWholeAni = maxani;
		}
	}

	m_Progress.SetRange(0, nWholeAni*8*14); // 진행 상황 프로그레스 준비.. 에니 폴더 갯수 * 방향수 * 각 부분(V1,V2,SH,FX,P0~P9);
	int nProgress = 0;
	m_bStopProcess = FALSE; // 스톱 플래그 초기화
	
	for(int nAni = 0; nAni < nWholeAni; nAni++)
	{
		for(int nDir = 0; nDir < 8; nDir++)
		{
			int nFrmQt = 0;
			for(int nPart = 0; nPart < 14; nPart++)
			{
				ADN.Format("%s\\%.3d\\%.2d\\%s\\A", Path, nAni, nDir, parts[nPart]);
				NDN.Format("%s\\%.3d\\%.2d\\%s\\N", Path, nAni, nDir, parts[nPart]);
				int nAniFrm = 0;
				nProgress++;
				// 시스템을 계속 유지한다...  // 강제로 새로 업데이트
				MSG msg; PeekMessage(&msg, NULL, 0, 0, PM_REMOVE); TranslateMessage(&msg); DispatchMessage(&msg); this->UpdateWindow();
				m_Progress.SetPos(nProgress);

				// Anti 폴더 검색 및 파일 찾기..
				int nAFileQt = 0;
				if(SetCurrentDirectory(ADN))
				{
					CFileFind find; // 파일 찾기..
					if(find.FindFile("*.bmp", 0))
					{
						BOOL bFind = TRUE;
						while(bFind)
						{
							bFind = find.FindNextFile();
							if(find.IsDirectory() == TRUE) continue;
							if(nAFileQt >= MAX_FRM) break; // 파일이 MAX_FRM개가 넘으면 스톱 !!
							lstrcpy(szAFNs[nAFileQt], find.GetFilePath()); // 파일 경로이름을 복사한다..
							nAFileQt++;
						}
					}
				}
				// Non - Anti 폴더 검색 및 파일 찾기..
				int nNFileQt = 0;
				if(SetCurrentDirectory(NDN))
				{
					CFileFind find; // 파일 찾기..
					if(find.FindFile("*.bmp", 0))
					{
						BOOL bFind = TRUE;
						while(bFind)
						{
							bFind = find.FindNextFile();
							if(find.IsDirectory() == TRUE) continue;
							if(nNFileQt >= MAX_FRM) break; // 파일이 MAX_FRM개가 넘으면 스톱 !!
							lstrcpy(szNFNs[nNFileQt], find.GetFilePath()); // 파일 경로이름을 복사한다..
							nNFileQt++;
						}
					}
				}

				int nWholeFrm = 0;
				(nAFileQt > nNFileQt) ? nWholeFrm = nAFileQt : nWholeFrm = nNFileQt;
				if(nWholeFrm <= 0) continue; // 파일이 하나도 없으면.. 지나간다..
				else nFrmQt = nWholeFrm;
				
				qsort(szAFNs, nAFileQt, 256, CompareStringAscendProc);
				qsort(szNFNs, nNFileQt, 256, CompareStringAscendProc);
				
				for(int nFrm = 0; nFrm < nWholeFrm; nFrm++)
				{
					CString AFN = szAFNs[nFrm], NFN = szNFNs[nFrm];
					bSuccess = TransactPieceLSPSpr(AFN, NFN, &rcTmp, &nTmp, &pwTmp);
					if(bSuccess == TRUE && nTmp > 0 && pwTmp != NULL) // 추출 성공했을때..
					{
						// 시스템을 계속 유지한다...  // 강제로 새로 업데이트
						MSG msg; PeekMessage(&msg, NULL, 0, 0, PM_REMOVE); TranslateMessage(&msg); DispatchMessage(&msg); this->UpdateWindow();
						m_Progress.SetPos(nProgress); Info.Format("%s + %s", szAFNs[nFrm], szNFNs[nFrm]);
						m_FileName.SetWindowText(Info);
						
						rcTmp.left -= ptCenter.x; rcTmp.top -= ptCenter.y; rcTmp.right -= ptCenter.x; rcTmp.bottom -= ptCenter.y;
						POINT ptOffset = { rcTmp.left, rcTmp.top};
						UpdatePreview(ptOffset, pwTmp); // 프리뷰 업데이트..

						int frm = nWholeFrame+nFrm;
						switch(nPart)
						{
						case 0: AutoSprs[frm].nV1 = nTmp; AutoSprs[frm].rcV1 = rcTmp; AutoSprs[frm].pV1 = pwTmp; break;
						case 1: AutoSprs[frm].nV2 = nTmp; AutoSprs[frm].rcV2 = rcTmp; AutoSprs[frm].pV2 = pwTmp; break;
						case 2: AutoSprs[frm].nFX = nTmp; AutoSprs[frm].rcFX = rcTmp; AutoSprs[frm].pFX = pwTmp; break;
						case 3: AutoSprs[frm].nSH = nTmp; AutoSprs[frm].rcSH = rcTmp; AutoSprs[frm].pSH = pwTmp; break;
						case 4: AutoSprs[frm].nPs[0] = nTmp; AutoSprs[frm].rcPs[0] = rcTmp; AutoSprs[frm].pPs[0] = pwTmp; break;
						case 5: AutoSprs[frm].nPs[1] = nTmp; AutoSprs[frm].rcPs[1] = rcTmp; AutoSprs[frm].pPs[1] = pwTmp; break;
						case 6: AutoSprs[frm].nPs[2] = nTmp; AutoSprs[frm].rcPs[2] = rcTmp; AutoSprs[frm].pPs[2] = pwTmp; break;
						case 7: AutoSprs[frm].nPs[3] = nTmp; AutoSprs[frm].rcPs[3] = rcTmp; AutoSprs[frm].pPs[3] = pwTmp; break;
						case 8: AutoSprs[frm].nPs[4] = nTmp; AutoSprs[frm].rcPs[4] = rcTmp; AutoSprs[frm].pPs[4] = pwTmp; break;
						case 9: AutoSprs[frm].nPs[5] = nTmp; AutoSprs[frm].rcPs[5] = rcTmp; AutoSprs[frm].pPs[5] = pwTmp; break;
						case 10: AutoSprs[frm].nPs[6] = nTmp; AutoSprs[frm].rcPs[6] = rcTmp; AutoSprs[frm].pPs[6] = pwTmp; break;
						case 11: AutoSprs[frm].nPs[7] = nTmp; AutoSprs[frm].rcPs[7] = rcTmp; AutoSprs[frm].pPs[7] = pwTmp; break;
						case 12: AutoSprs[frm].nPs[8] = nTmp; AutoSprs[frm].rcPs[8] = rcTmp; AutoSprs[frm].pPs[8] = pwTmp; break;
						case 13: AutoSprs[frm].nPs[9] = nTmp; AutoSprs[frm].rcPs[9] = rcTmp; AutoSprs[frm].pPs[9] = pwTmp; break;
						}
						
						if(m_bStopProcess == TRUE) goto ERROR_PROCESS;// 변환에 실패 하거나 Esc 누르면 변환 중단..
						if(nPart == 0) // V1 일때...
						{
							anis[nAni].nFrms[nDir][nAniFrm] = nWholeFrame + nFrm;
							if(nDir == 0) anis[nAni].nMaxFrm++; // 앞방향일때만 최대 프레임 증가..
							if(nDir == 0 && nAniFrm == 0) wsprintf(anis[nAni].szName, "자동추출 - %.3d", nAni);
							nAniFrm++;
						}
					}
				}
			}
			nWholeFrame += nFrmQt;
		}
	}

	if(nWholeFrame <= 0) 
	{
		MessageBox("처리된 프레임이 없습니다.");
		goto ERROR_PROCESS;
	}

	///////////////////////////////////////////////////////////////////////////////////////////
	// 에니메이션 파일 저장..
	{
		CString FileTitle = Path.Right(Path.GetLength() - Path.ReverseFind('\\') - 1);
		CFileDialog dlg(FALSE, "ani", FileTitle+".ani", OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, "에니메이션(*.ani)|*.ani||", NULL);
		dlg.m_ofn.lpstrInitialDir = g_pTEng->GetCurPath("ANI");
		
		if(dlg.DoModal() != IDCANCEL)
		{
			CString FileName = dlg.GetFileName();
			CAniObjEx2* pAniObj = new CAniObjEx2;
			int nMaxAni = 0;

			for(int i = 0; i < MAX_ANI; i++) if(anis[i].nMaxFrm > 0) nMaxAni++; // 에니메이션이 총 몇갠가 세보고..
			pAniObj->AniAlloc(nMaxAni);
			
			int tmp = 0;
			for(i = 0; i < MAX_ANI; i++)
			{
				if(anis[i].nMaxFrm <= 0) continue; // 프레임이 없는건 지나간다..
				pAniObj->SetAniData(tmp, &anis[i]);
				tmp++;
			}
			pAniObj->Save(FileName, SAVE_ANI);
			delete pAniObj; pAniObj = NULL;
		}
	}
	// 에니메이션 파일 저장..
	///////////////////////////////////////////////////////////////////////////////////////////

	
	///////////////////////////////////////////////////////////////////////////////////////////
	// 스프라이트 파일 저장 ..
	{
		CString FileTitle = Path.Right(Path.GetLength() - Path.ReverseFind('\\') - 1);
		CFileDialog dlg(FALSE, "spx", FileTitle+".spx", OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, "확장 LSP Sprite(*.spx)|*.spx||", NULL);
		dlg.m_ofn.lpstrInitialDir = g_pTEng->GetCurPath("SPR");
		if(dlg.DoModal() == IDCANCEL) goto ERROR_PROCESS;
		CString FileName = dlg.GetFileName();

		CFile file; file.Open(FileName, CFile::modeCreate | CFile::modeWrite);
		_SPR_HEADER HSpr;
		CLEAR(HSpr);
		HSpr.nQt = nWholeFrame;
		wsprintf(HSpr.szID, "확장 LSP Sprite : %s | Sprite - %d", FileTitle, HSpr.nQt);
		file.Write(&HSpr, sizeof(_SPR_HEADER));

		// 스프라이트 영역 - 툴에서만 쓰이는 부가적인 데이터. - Skip....
		file.Seek(sizeof(_SPR_TOOL_EX)*HSpr.nQt, CFile::current);

		// 스프라이트 영역 - 실제 게임에서만 쓰이는 데이터.
		_SPR_LSP_EX sprex;
		for(int i = 0; i < HSpr.nQt; i++)
		{
			sprex.rcV1 = AutoSprs[i].rcV1;
			sprex.rcV2 = AutoSprs[i].rcV2;
			sprex.rcSH = AutoSprs[i].rcSH;
			sprex.rcFX = AutoSprs[i].rcFX;
			memcpy(sprex.rcPs, AutoSprs[i].rcPs, sizeof(sprex.rcPs));
			file.Write(&sprex, sizeof(_SPR_LSP_EX));
		}

		/////////////////////////
		// 압축 스프라이트 데이터
		for(i = 0; i < HSpr.nQt; i++)
		{
			// 캐릭터 보이는 영역 - Part 1
			if(AutoSprs[i].nV1 > 0) { file.Write(&AutoSprs[i].nV1, 4); file.Write(AutoSprs[i].pV1, AutoSprs[i].nV1); }
			else file.Write(&AutoSprs[i].nV1, 4);// 영역이 없으면 0 만 써놓는다.

			// 캐릭터 보이는 영역 - Part 2
			if(AutoSprs[i].nV2 > 0) { file.Write(&AutoSprs[i].nV2, 4); file.Write(AutoSprs[i].pV2, AutoSprs[i].nV2); }
			else file.Write(&AutoSprs[i].nV2, 4);// 영역이 없으면 0 만 써놓는다.

			// 그림자 영역
			if(AutoSprs[i].nSH > 0) { file.Write(&AutoSprs[i].nSH, 4); file.Write(AutoSprs[i].pSH, AutoSprs[i].nSH); }
			else file.Write(&AutoSprs[i].nSH, 4);// 영역이 없으면 0 만 써놓는다.

			// 공격 효과 영역
			if(AutoSprs[i].nFX > 0) { file.Write(&AutoSprs[i].nFX, 4); file.Write(AutoSprs[i].pFX, AutoSprs[i].nFX); }
			else file.Write(&AutoSprs[i].nFX, 4); // 영역이 없으면 0 만 써놓는다.

			for(int j = 0; j < MAX_PART; j++) // 무기, 아이템등 파트 영역
			{
				if(AutoSprs[i].nPs[j] > 0) {	file.Write(&AutoSprs[i].nPs[j], 4); file.Write(AutoSprs[i].pPs[j], AutoSprs[i].nPs[j]); }
				else file.Write(&AutoSprs[i].nPs[j], 4); // 영역이 없으면 0 만 써놓는다.
			}
		} // end of for i
		file.Close();
	}
	// 스프라이트 파일 저장 ..
	///////////////////////////////////////////////////////////////////////////////////////////
	
	goto NO_ERR_PROCESS;

ERROR_PROCESS:
	MessageBox(Info, "처리를 중단하거나 에러가 발생하였습니다.");

NO_ERR_PROCESS:
	for(int i = 0; i < MAX_SPR; i++)
	{
		if(AutoSprs[i].pV1) { delete [] AutoSprs[i].pV1; AutoSprs[i].pV1 = NULL; }
		if(AutoSprs[i].pV2) { delete [] AutoSprs[i].pV2; AutoSprs[i].pV2 = NULL; }
		if(AutoSprs[i].pFX) { delete [] AutoSprs[i].pFX; AutoSprs[i].pFX = NULL; }
		if(AutoSprs[i].pSH) { delete [] AutoSprs[i].pSH; AutoSprs[i].pSH = NULL; }
		for(int j = 0; j < MAX_PART; j++)
		{
			if(AutoSprs[i].pPs[j]) { delete [] AutoSprs[i].pPs[j]; AutoSprs[i].pPs[j] = NULL; }
		}
	}
	return;
}


int CAutoSprDlg::CompareIntegerProc(const void *arg1, const void *arg2)
{
	int frame1 = *(int*)arg1;
	int frame2 = *(int*)arg2;

	if(frame1 < frame2) return -1;
	else if(frame1 == frame2) return 0;
	return 1;
}

int CAutoSprDlg::CompareDirAndFrmsProc(const void *arg1, const void *arg2)
{
	CString FN1 = (const char*)arg1;
	CString FN2 = (const char*)arg2;

	char szDir1[3]; 
	char szDir2[3]; 
	lstrcpy(szDir1, FN1.Mid(FN1.GetLength() - 11, 2));
	lstrcpy(szDir2, FN2.Mid(FN2.GetLength() - 11, 2));

	if(szDir1[0] < '0' || szDir1[0] > '9') szDir1[0] = '0';
	if(szDir2[0] < '0' || szDir2[0] > '9') szDir2[0] = '0';
	if(szDir1[1] < '0' || szDir1[1] > '9') szDir1[1] = NULL;
	if(szDir2[1] < '0' || szDir2[1] > '9') szDir2[1] = NULL;

	// "00_0000.bmp"
	int dir1 = atoi(szDir1);
	int dir2 = atoi(szDir2);

	int frm1 = atoi(FN1.Mid(FN1.GetLength() - 8, 4));
	int frm2 = atoi(FN2.Mid(FN2.GetLength() - 8, 4));
	
	int t1 = dir1*1000 + frm1;
	int t2 = dir2*1000 + frm2;

	if(t1 < t2) return -1;
	else if(t1 > t2) return 1;
	else return 0;

	return 0;
}

int CAutoSprDlg::CompareStringAscendProc(const void *arg1, const void *arg2)
{
	const char* pStr1 = (char*)arg1;
	const char* pStr2 = (char*)arg2;

	return lstrcmpi(pStr1, pStr2);
}
